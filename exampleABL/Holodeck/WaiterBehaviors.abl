	/**************************************************************************
	 *  Subtree transitions.
	 *
	 *************************************************************************/
	 
	/**
	 * General transition.
	 */
	sequential behavior TransitionToBehindBar() {
		specificity 2;
		mental_act {
			BehindBarWME bbWME = new BehindBarWME(System.currentTimeMillis());
			BehavingEntity.getBehavingEntity().addWME(bbWME);
			Bot.println("TransitionToBehindBar(): SUBTREE TRANSITION: BehindBar");
		
			Object[] wmes;
			
			//last state WMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("LastStateWME").toArray();
			if (wmes.length > 0)  
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((LastStateWME)wmes[i]);
			
			//subtree WMEs
			
			//clean RoamWMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("RoamWME").toArray();
			if (wmes.length > 0)  {
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((RoamWME)wmes[i]);
				BehavingEntity.getBehavingEntity().addWME(new LastStateWME("Roam"));
			}
			
			//clean ServiceCustomerWMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("ServiceCustomerWME").toArray();
			if (wmes.length > 0)  {
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((ServiceCustomerWME)wmes[i]);
				BehavingEntity.getBehavingEntity().addWME(new LastStateWME("ServiceCustomer"));
			}
		}
	}
	 
	
	
	
	 sequential behavior TransitionToRoam() {
		specificity 2;
		
		mental_act {
			RoamWME rWME = new RoamWME(System.currentTimeMillis());
			BehavingEntity.getBehavingEntity().addWME(rWME);
			Bot.println("TransitionToRoam(): SUBTREE TRANSITION: Roam");
		
			Object[] wmes;
			
			//last state WMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("LastStateWME").toArray();
			if (wmes.length > 0)  
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((LastStateWME)wmes[i]);
			
			//subtree WMEs
			
			//clean BehindBarWMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("BehindBarWME").toArray();
			if (wmes.length > 0)  {
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((BehindBarWME)wmes[i]);
				BehavingEntity.getBehavingEntity().addWME(new LastStateWME("BehindBar"));
			}
			
			//clean ServiceCustomerWMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("ServiceCustomerWME").toArray();
			if (wmes.length > 0)  {
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((ServiceCustomerWME)wmes[i]);
				BehavingEntity.getBehavingEntity().addWME(new LastStateWME("ServiceCustomer"));
			}
		}
	}
	
	sequential behavior TransitionToServiceCustomer() {
		specificity 2;
		precondition {
			!(ServiceCustomerWME)
		}
		
		mental_act {
			ServiceCustomerWME scWME = new ServiceCustomerWME("", System.currentTimeMillis());
			BehavingEntity.getBehavingEntity().addWME(scWME);
			Bot.println("TransitionToServiceCustomer(): SUBTREE TRANSITION: ServiceCustomer");
		
			Object[] wmes;
			
			//last state WMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("LastStateWME").toArray();
			if (wmes.length > 0)  
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((LastStateWME)wmes[i]);
			
			//subtree WMEs
			
			//clean RoamWMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("RoamWME").toArray();
			if (wmes.length > 0)  {
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((RoamWME)wmes[i]);
				BehavingEntity.getBehavingEntity().addWME(new LastStateWME("Roam"));
			}
			
			//clean BehindBarWMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("BehindBarWME").toArray();
			if (wmes.length > 0)  {
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((BehindBarWME)wmes[i]);
				BehavingEntity.getBehavingEntity().addWME(new LastStateWME("BehindBar"));
			}
		}
	}
	 
	/**
	  * Transition to a specified initial target.
	  */
	 sequential behavior TransitionToServiceCustomer() {
		specificity 3;
		precondition {
			(ServiceCustomerWME customerName::initialTarget)
		}
		
		//subgoal CleanForTransition

		mental_act {
			Bot.println("SUBTREE TRANSITION: ServiceCustomer with initial target of " + initialTarget + ".");
			Object[] wmes;
			
			//last state WMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("LastStateWME").toArray();
			if (wmes.length > 0)  
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((LastStateWME)wmes[i]);
			
			//subtree WMEs
			
			//clean RoamWMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("RoamWME").toArray();
			if (wmes.length > 0)  {
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((RoamWME)wmes[i]);
				BehavingEntity.getBehavingEntity().addWME(new LastStateWME("Roam"));
			}
			
			//clean BehindBarWMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("BehindBarWME").toArray();
			if (wmes.length > 0)  {
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((BehindBarWME)wmes[i]);
				BehavingEntity.getBehavingEntity().addWME(new LastStateWME("BehindBar"));
			}
		}
	}
	 
	sequential behavior CleanForTransition() {
		mental_act {
			Object[] wmes;
			
			//last state WMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("LastStateWME").toArray();
			if (wmes.length > 0)  
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((LastStateWME)wmes[i]);
			
			//subtree WMEs
			
			//clean BehindBarWMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("BehindBarWME").toArray();
			if (wmes.length > 0)  {
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((BehindBarWME)wmes[i]);
				BehavingEntity.getBehavingEntity().addWME(new LastStateWME("BehindBar"));
			}
			
			//clean RoamWMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("RoamWME").toArray();
			if (wmes.length > 0)  {
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((RoamWME)wmes[i]);
				BehavingEntity.getBehavingEntity().addWME(new LastStateWME("Roam"));
			}
			
			//clean ServiceCustomerWMEs
			wmes = BehavingEntity.getBehavingEntity().lookupWME("ServiceCustomerWME").toArray();
			if (wmes.length > 0)  {
				for(int i = 0; i < wmes.length; ++i)
					BehavingEntity.getBehavingEntity().deleteWME((ServiceCustomerWME)wmes[i]);
				BehavingEntity.getBehavingEntity().addWME(new LastStateWME("ServiceCustomer"));
			}
		}
	}
	 
	 /*************************************************************************
	  * Determine next subtree from curent state.
	  *
	  ************************************************************************/
	 sequential behavior DetermineNextSubtree() {
		specificity 4;
		precondition { (LastStateWME stateName=="BehindBar") }

		
		subgoal TransitionToBehindBar();
	}
	
	 sequential behavior DetermineNextSubtree() {
		specificity 4;
		precondition { (LastStateWME stateName=="Roam") }

		
		subgoal TransitionToRoam();
	}
	
	
	 
	 /**
	 * Stochastically chooses a subtree to perform next that was not the most recently-performend subtree.
	 */
	sequential behavior DetermineNextSubtree() {
		specificity 3;
		precondition { (LastStateWME stateName::lastSubtree) }
		int next;
		mental_act {
			next = randomNumGen.nextInt(2); //the number of subtrees  - 1
			if(lastSubtree.equals("BehindBar"))
				++next; //1 or 2
			if(lastSubtree.equals("Roam"))
				next = (next==1)?2:0; //0 or 2
		}
		subgoal DetermineNextSubtreeByNumber(next);
	}
	
	sequential behavior DetermineNextSubtree() {
		specificity 2;
		int next;
		mental_act {
			next = randomNumGen.nextInt(3); //the number of subtrees  - 1
		}
		subgoal DetermineNextSubtreeByNumber(next);
	}
	
	sequential behavior DetermineNextSubtreeByNumber(int n) {
		precondition {(n == 0)}
		subgoal TransitionToBehindBar();			
	}
	sequential behavior DetermineNextSubtreeByNumber(int n) {
		precondition {(n == 1)}
		subgoal TransitionToRoam();			
	}
	sequential behavior DetermineNextSubtreeByNumber(int n) {
		precondition {(n == 2)}
		subgoal TransitionToServiceCustomer();			
	}
	/**************************************************************************
	 *  BehindBar Subtree.
	 *
	 *************************************************************************/
	sequential behavior EnterBehindBar () {
		with (success_test { (BehindBarWME) }) wait;
		subgoal BehindBarMaster();
	}
	
	parallel behavior BehindBarMaster() {
		context_condition { (BehindBarWME) }
		
		with (priority 10, ignore_failure) subgoal BBGotoTransitionPoint();
		with (priority 1, persistent) subgoal BBPerform();
		with (priority 1) subgoal BBBoredTimeOut();
		with (priority 1, persistent) subgoal HumanLocationAdjustment(); 
		with (priority 1, persistent) subgoal MaintainMinSocialDistance();
	}
	
	sequential behavior BBGotoTransitionPoint() {
		specificity 2;
		//If far from behind bar location, then transition into the bar location
		precondition {
			self = (SelfWME x::selfX y::selfY z::selfZ)
			(SensorUtilities.DistanceBetween(selfX, selfY, selfZ, BAR_EXIT_X, BAR_EXIT_Y, BAR_EXIT_Z) > 1.0d)
			(AvatarWME name::avName isWaiter==false)
		}
		
		double transX, transY, transZ;
		
		mental_act {
			Point3d targetPoint;
			targetPoint = RoamWME.ROAM_TRANSITION_POINT;
			
			transX = targetPoint.x;
			transY = targetPoint.y;
			transZ = targetPoint.z;
			Bot.println("BBGotoTransitionPoint_1(): Going to transition point!");
		
		}
		
		subgoal TurnAndWait(transX, transY);
		subgoal WalkAndWait(transX, transY, transZ);
		subgoal TurnAndWait(BEHIND_BAR_X, BEHIND_BAR_Y);
		subgoal Wait(3000);
		//subgoal TurnAndWait(BAR_EXIT_X, BAR_EXIT_Y);
		subgoal WalkAndWait(BAR_EXIT_X, BAR_EXIT_Y, BAR_EXIT_Z);
		
		subgoal WalkAndWait(BEHIND_BAR_X, BEHIND_BAR_Y, BEHIND_BAR_Z);
		subgoal TurnAndWait(avName); //look at some avatar
		
		
		
	}

	sequential behavior BBGotoTransitionPoint() {
		specificity 1;
		//If close to behind bar, then just go to behind bar
		precondition {
			self = (SelfWME x::selfX y::selfY z::selfZ)
			(AvatarWME name::avName isWaiter==false)
		}
		
		double transX, transY, transZ;
		
		mental_act {
		
			Bot.println("BBGotoTransitionPoint_2(): Already behind bar, Going to back of bar!");
			
			
		}
		

		subgoal WalkAndWait(BEHIND_BAR_X, BEHIND_BAR_Y, BEHIND_BAR_Z);
		subgoal TurnAndWait(avName); //look at some avatar
		
		
	}
	

	
	//every so many seconds, do something
	sequential behavior BBPerform() {
		long startTime;
		
		mental_act {
			startTime = System.currentTimeMillis();
		}
		
		with( success_test {
			!(AutoPilotWME)
			((System.currentTimeMillis() - startTime) > 4000)
		}) wait;
		
		//shuffle avatar state to make selection more random
		subgoal ShuffleWME("AvatarWME");
		with (ignore_failure) subgoal BBDoPerform();
	
	}
	
	
	//If waiter is close, move away
	sequential behavior BBDoPerform() {
		specificity 2;
		precondition {
			(randomNumGen.nextDouble() < 0.7)
			self = (SelfWME)
			targetAvatar = (AvatarWME name::avName isWaiter==true)
			(AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.PERSONAL, targetAvatar, self))
			
		} 
		
		subgoal Wait(1000);
		subgoal BBDoPerform_MoveAround();


		
	}
	
	
	//Turn and gesture at somebody close by
	sequential behavior BBDoPerform() {
		specificity 2;
		precondition {
			(randomNumGen.nextDouble() < 0.3)
			self = (SelfWME)
			targetAvatar = (AvatarWME name::avName isWaiter==false)
			(AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.SOCIAL, targetAvatar, self))
			
		} 
		String gesture;
		mental_act {
			double randomNum = randomNumGen.nextDouble();
			if( randomNum < 0.4) {
			
				gesture = AnimationWME.Gestures.WAVE;
			}	
			else if ( randomNum < 0.7) {
				gesture = AnimationWME.Gestures.WINK_BANG;
			}
			else {
				gesture = AnimationWME.Gestures.CLAP;
			}
		}
		
		subgoal TurnAndWait(avName);
		subgoal PlayGesture(gesture);

		
	}
	
	
	//Turn towards somebody close
	sequential behavior BBDoPerform() {
		specificity 2;
		precondition {
			(randomNumGen.nextDouble() < 0.4)
			self = (SelfWME)
			targetAvatar = (AvatarWME name::avName)
			(AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.SOCIAL, targetAvatar, self))
			
		} 
	
		subgoal TurnAndWait(avName);

	}
	

	
	
	
	//Play some gesture
	sequential behavior BBDoPerform() {
		precondition {
			(randomNumGen.nextDouble() < 0.3)
			self = (SelfWME)
		} 
		String someGesture;
		mental_act {
		
			double randomNum = randomNumGen.nextDouble();
			if( randomNum < 0.3) {
			
				someGesture = AnimationWME.Gestures.BORED;
			}
			else if (randomNum < 0.6)
			{
				someGesture = AnimationWME.Gestures.CHUCKLE;
			}
			else if (randomNum < 0.9)
			{
				someGesture = AnimationWME.Gestures.CLAP;
			}
			else {
				someGesture = AnimationWME.Gestures.WINK_BANG;
			}
		}
		
	
		subgoal PlayGesture(someGesture);

		
	}
	
	//Turn and gesturetowards somebody far
	sequential behavior BBDoPerform() {
		precondition {
			(randomNumGen.nextDouble() < 0.4)
			self = (SelfWME)
			targetAvatar = (AvatarWME name::avName isWaiter==false)
			(!AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.SOCIAL, targetAvatar, self))
			
		} 
		String gesture;
		mental_act {
			double randomNum = randomNumGen.nextDouble();
			if( randomNum < 0.5) {
			
				gesture = AnimationWME.Gestures.WAVE;
			}	
			else {
				gesture = AnimationWME.Gestures.WINK_BANG;
			}
		}
	
		subgoal TurnAndWait(avName);
		subgoal Wait(1000);
		subgoal PlayGesture(gesture);

	}
	
	//Turn towards somebody far
	sequential behavior BBDoPerform() {
		precondition {
			(randomNumGen.nextDouble() < 0.4)
			self = (SelfWME)
			targetAvatar = (AvatarWME name::avName isWaiter==false)
			(!AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.PERSONAL, targetAvatar, self))
			
		} 
	
		subgoal TurnAndWait(avName);

	}
	
	
	//Move around in bar area
	sequential behavior BBDoPerform() {
		precondition {
			(randomNumGen.nextDouble() < 0.65)
			
		} 
		
		subgoal BBDoPerform_MoveAround();

	}
	
	//If far from bar exit location, go to that location
	sequential behavior BBDoPerform_MoveAround() {
		precondition {
			self = (SelfWME x::selfX y::selfY z::selfZ)
			(SensorUtilities.DistanceBetween(selfX, selfY, selfZ, BAR_EXIT_X, BAR_EXIT_Y, BAR_EXIT_Z) > 1.5d)
		}
		
		double randomBuffer;
		mental_act {
		
			randomBuffer = -1.5 + randomNumGen.nextDouble(); //-1.5->-0.5 range
		
		}
		
		subgoal WalkAndWait(BAR_EXIT_X, BAR_EXIT_Y, BAR_EXIT_Z, randomBuffer);
		subgoal TurnAndWait(barFrontX, barFrontY);
	
	}
	
	//If far from behind bar location, go to that location
	sequential behavior BBDoPerform_MoveAround() {
		precondition {
			self = (SelfWME x::selfX y::selfY z::selfZ)
			(SensorUtilities.DistanceBetween(selfX, selfY, selfZ, BEHIND_BAR_X, BEHIND_BAR_Y, BEHIND_BAR_Z) > 1.5d)
		}
		
		double randomBuffer;
		mental_act {
		
			randomBuffer = -1.5 + randomNumGen.nextDouble(); //-0.5->1.5 range
		
		}
		
		subgoal WalkAndWait(BEHIND_BAR_X, BEHIND_BAR_Y, BEHIND_BAR_Z, randomBuffer);
		subgoal TurnAndWait(barFrontX, barFrontY);
	
	}
	
	
	
	
	
	sequential behavior BBBoredTimeOut() {
	

		with (success_test {
			(BehindBarWME startTime::startT)
			(System.currentTimeMillis() - startT > 60000)
		} ) wait;
		
		mental_act {
		
			Bot.println("Bored with Behind Bar standing, transitioning to roaming");
		}
		subgoal TransitionToRoam();
		
		
	}
	
	/**************************************************************************
	 *  Roam Subtree.
	 *
	 *************************************************************************/
	sequential behavior EnterRoam() {
		with (success_test { (RoamWME) }) wait;
		
		subgoal RoamMaster();
	}
	parallel behavior RoamMaster() {
		context_condition { (RoamWME) }
		
		with (priority 10, ignore_failure) subgoal RGotoTransitionPoint();
		with (priority 1, persistent) subgoal RPerform();
		with (priority 1) subgoal RBoredTimeOut();
		with (priority 1, persistent) subgoal HumanLocationAdjustment(); 
		with (priority 1, persistent) subgoal MaintainMinSocialDistance();
	}
	
	sequential behavior RGotoTransitionPoint() {
		specificity 2;
		//If far from behind bar location, then just go to a random roam point
		precondition {
	
			self = (SelfWME x::selfX y::selfY z::selfZ)
			(SensorUtilities.DistanceBetween(selfX, selfY, selfZ, BEHIND_BAR_X, BEHIND_BAR_Y, BEHIND_BAR_Z) > 6.0d)
		}
		
		double targetX, targetY, targetZ;
		Point3d targetPoint;
		mental_act {
	
			targetPoint = RoamWME.getRandomNewWaypoint(selfX, selfY, selfZ);
			
			targetX = targetPoint.x;
			targetY = targetPoint.y;
			targetZ = targetPoint.z;
			Bot.println("RGotoTransitionPoint(): Already roaming about far from bar, Going to random roam point!");
		
		}
		
		subgoal TurnAndWait(targetX, targetY);
		subgoal WalkAndWait(targetX, targetY, targetZ, 0.75d);
		subgoal TurnAndWait(stageX, stageY);
		
	}
	
	sequential behavior RGotoTransitionPoint() {
		specificity 1;
		//Go to transition point first, then go roaming
		precondition {
			self = (SelfWME x::selfX y::selfY z::selfZ)
			
		}
		Point3d targetPoint;
		double targetX, targetY, targetZ;
		
		mental_act {
		
			targetPoint = RoamWME.ROAM_TRANSITION_POINT;
			
			targetX = targetPoint.x;
			targetY = targetPoint.y;
			targetZ = targetPoint.z;
			Bot.println("RGotoTransitionPoint(): Going to transition point");
		
		}
		
		subgoal TurnAndWait(targetX, targetY);
		subgoal WalkAndWait(targetX, targetY, targetZ);
		subgoal Wait(2000);
		
		//Go to some roam waypoint
		mental_act {	
			targetPoint = RoamWME.getRandomNewWaypoint(targetX, targetY, targetZ);
			
			targetX = targetPoint.x;
			targetY = targetPoint.y;
			targetZ = targetPoint.z;
			Bot.println("Going to some random roam point!");

		}
		
		
		subgoal TurnAndWait(targetX, targetY);
		subgoal WalkAndWait(targetX, targetY, targetZ, 0.75d);
		subgoal TurnAndWait(stageX, stageY);
		
	}
	
	
	//every so many seconds, do something
	sequential behavior RPerform() {
		long startTime;
		
		mental_act {
			startTime = System.currentTimeMillis();
		}
		
		with( success_test {
			!(AutoPilotWME)
			((System.currentTimeMillis() - startTime) > 4000)
		}) wait;
		
		
		
		//shuffle avatar state to make selection more random
		subgoal ShuffleWME("AvatarWME");
		with (ignore_failure) subgoal RDoPerform();
	
	}
	
	//Clap at a dance
	sequential behavior RDoPerform() {
		specificity 2;
		precondition {
			(randomNumGen.nextDouble() < 0.4)
			danceAnim = (AnimationWME avatarName::avName isDance==true)
			targetAvatar = (AvatarWME name == avName)
			self = (SelfWME)
		} 
		String clapGesture;
		mental_act {
			clapGesture = AnimationWME.Gestures.CLAP;
			//Consume event
			BehavingEntity.getBehavingEntity().deleteWME(danceAnim);
		}
		
		subgoal TurnAndWait(avName);
		subgoal PlayGesture(clapGesture);

		
	}
	
	//Turn and gesture at somebody close by
	sequential behavior RDoPerform() {
		specificity 2;
		precondition {
			(randomNumGen.nextDouble() < 0.4)
			self = (SelfWME)
			targetAvatar = (AvatarWME name::avName)
			(AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.SOCIAL, targetAvatar, self))
			
		} 
		String someGesture;
		mental_act {
		
			double randomNum = randomNumGen.nextDouble();
			if( randomNum < 0.25) {
			
				someGesture = AnimationWME.Gestures.WAVE;
			}
			else if (randomNum < 0.50)
			{
				someGesture = AnimationWME.Gestures.CHUCKLE;
			}
			else if (randomNum < 0.75)
			{
				someGesture = AnimationWME.Gestures.LAUGH;
			}
			else {
				someGesture = AnimationWME.Gestures.WINK_BANG;
			}
		}
		
		subgoal TurnAndWait(avName);
		subgoal PlayGesture(someGesture);

		
	}
	
	
	//Turn towards somebody close by
	sequential behavior RDoPerform() {
		specificity 2;
		precondition {
			(randomNumGen.nextDouble() < 0.4)
			self = (SelfWME)
			targetAvatar = (AvatarWME name::avName)
			(AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.SOCIAL, targetAvatar, self))
			
		} 
		
		
		subgoal TurnAndWait(avName);

		
	}
	
	//Turn towards stage, nudge 
	sequential behavior RDoPerform() {
		precondition {
			(randomNumGen.nextDouble() < 0.3)
			
		} 
		
		String direction;
		mental_act {	
		
			double randomNum = randomNumGen.nextDouble();
			if( randomNum < 0.4) {
			
				direction = NudgeMove.FORWARD;
			}
			else if (randomNum < 0.7) {
				direction = NudgeMove.BACKWARD;
			}
			else if (randomNum < 0.85) {
				direction = NudgeMove.LEFT;
			}
			else {
				direction = NudgeMove.RIGHT;
			}

		}
		
		
		subgoal TurnAndWait(stageX, stageY);
		subgoal Wait(2000);
		act nudgeMove(direction);

	}
	
	//Turn towards somebody far
	sequential behavior RDoPerform() {

		precondition {
			(randomNumGen.nextDouble() < 0.5)
			self = (SelfWME)
			targetAvatar = (AvatarWME name::avName)
			(!AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.PERSONAL, targetAvatar, self))
			
		} 
		
		
		subgoal TurnAndWait(avName);

		
	}
	

	//Move to random waypoint
	sequential behavior RDoPerform() {
		precondition {
			(randomNumGen.nextDouble() < 0.6)
			self = (SelfWME x::selfX y::selfY z::selfZ)

		} 
		
		double targetX, targetY, targetZ;
		mental_act {	
			Point3d targetPoint;
			targetPoint = RoamWME.getRandomNewWaypoint(selfX, selfY, selfZ);
			
			targetX = targetPoint.x;
			targetY = targetPoint.y;
			targetZ = targetPoint.z;

		}
		
		
		subgoal TurnAndWait(targetX, targetY);
		subgoal WalkAndWait(targetX, targetY, targetZ, 0.75d);
		subgoal TurnAndWait(stageX, stageY);
		subgoal Wait(1000);

	}
	
	
	
	sequential behavior RBoredTimeOut() {
	

		with (success_test {
			(RoamWME startTime::startT)
			(System.currentTimeMillis() - startT > 90000)
		} ) wait;
		
		
		subgoal RBoredPerform();
		
		
	}
	
	
	sequential behavior RBoredPerform() {
		specificity 2;
		precondition {
			(randomNumGen.nextDouble() < 0.6)
		}
		
		mental_act {
		
			Bot.println("Bored with Roaming, transitioning to service customer");
		}
		
		subgoal TransitionToServiceCustomer();
	}
	
	sequential behavior RBoredPerform() {
	
		mental_act {
		
			Bot.println("Bored with Roaming, transitioning to behind bar subtree...");
		}
		
		subgoal TransitionToBehindBar();
	}

	/**************************************************************************
	 *  ServiceCustomer Subtree.
	 *
	 *************************************************************************/
	sequential behavior EnterServiceCustomer() {
		with (success_test { (ServiceCustomerWME) }) wait;
		subgoal ServiceCustomerMaster();
	}
	
	parallel behavior ServiceCustomerMaster() {
		context_condition { (ServiceCustomerWME) }
		precondition { scWME=(ServiceCustomerWME)}
		String name;
		
		with (priority 5) mental_act {
			scWME.setStartTime(System.currentTimeMillis());
		}
		
		
		with(priority 4) subgoal ServiceCustomerInitalization();
		
		
		
		with (priority 1, persistent) subgoal HumanLocationAdjustment(); 
		with (priority 1, persistent) subgoal MaintainMinSocialDistance();
		with (priority 1) subgoal SCOfferDrink();
		with (priority 1) subgoal SCCustomerLeftWatcher();
	}
	
	sequential behavior ServiceCustomerInitalization() {
		String name;
		
		mental_act {
			//Set up flag telling us when the last time we saw a customer was
			BehavingEntity.getBehavingEntity().addWME(new LastCustomerWME(System.currentTimeMillis()));
		}
		
		subgoal ShuffleWME("AvatarWME");
		with (ignore_failure) subgoal SCPickCustomer();
	
		with (success_test {
			(ServiceCustomerWME customerName::name)
		}) wait;
		
		subgoal TurnAndWait(name);
		subgoal Wait(1000);
		subgoal WalkAndWait(name, 1.0d);
	}

	
	sequential behavior SCPickCustomer() {
		specificity 5;
		precondition {
			(randomNumGen.nextDouble() < 0.4)
			a=(AvatarWME isWaiter==false isParticipant==true)
			scWME=(ServiceCustomerWME customerName::name)
			(name == "")
		}
		
		mental_act {
			scWME.setCustomerName(a.getName());
			Bot.println("SCPickCustomer(): no character was specified for ServiceCustomer. " + a.getName() + " was chosen as the customer.");
		}
		
	}
	
	//Sometimes (rarely) pick regular
	sequential behavior SCPickCustomer() {
		specificity 4;
		precondition {
			(randomNumGen.nextDouble() < 0.2)
			a=(AvatarWME isWaiter==false isRegular==true)
			scWME=(ServiceCustomerWME customerName::name)
			(name == "")
		}
		
		mental_act {
			scWME.setCustomerName(a.getName());
			Bot.println("SCPickCustomer(): no character was specified for ServiceCustomer. " + a.getName() + " was chosen as the customer.");
		}
		
	}
	
	//Pick non regular
	sequential behavior SCPickCustomer() {
		specificity 3;
		precondition {
			a=(AvatarWME isWaiter==false isRegular==false)
			scWME=(ServiceCustomerWME customerName::name)
			(name == "")
		}
		

		mental_act {
			scWME.setCustomerName(a.getName());
			Bot.println("SCPickCustomer(): no character was specified for ServiceCustomer. " + a.getName() + " was chosen as the customer.");
		}
		
	}
	
	//Pick any non waiter
	sequential behavior SCPickCustomer() {
		specificity 2;
		precondition {
			a=(AvatarWME isWaiter==false)
			scWME=(ServiceCustomerWME customerName::name)
			(name == "")
		}
		

		mental_act {
			scWME.setCustomerName(a.getName());
			Bot.println("SCPickCustomer(): no character was specified for ServiceCustomer. " + a.getName() + " was chosen as the customer.");
		}
		
		
		
	}
	
	
	/**
	 * Offers a drink to the customer. This will either be the waiter giving a drink directly to the
	 * customer or by standing there and waiting for a few seconds for them to take a drink from
	 * the menu.
	 */
	sequential behavior SCOfferDrink() {
		
		precondition {	(ServiceCustomerWME customerName::name) }
		
		double giveDrink;
		String gesture;
		mental_act{ 
			giveDrink = randomNumGen.nextDouble(); 
			gesture = AnimationWME.Gestures.YES;
			Bot.println("SCOfferDrink(): customer is " + name + ".");
		}
		

		subgoal Wait(2000);
		subgoal TurnAndWait(name);
		subgoal PlayGesture(gesture);
		subgoal SCWaitOrGiveDrink(giveDrink);
	}
	
	sequential behavior SCCustomerLeftWatcher() {
		String custName;
		String gesture;
		with( success_test {
			self=(SelfWME)
			(ServiceCustomerWME customerName::custName)
			custAv = (AvatarWME name==custName)
			(!AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.SOCIAL, custAv, self))
		}) wait;
		
		mental_act {
			gesture = AnimationWME.Gestures.WAVE;
			Bot.println("SCCustomerLeftWatcher(): Customer left!, exiting ServiceCustomer()");
		}

		subgoal TurnAndWait(custName);
		subgoal Wait(1000);
		subgoal PlayGesture(gesture);
		subgoal Wait(1000);
		subgoal DetermineNextSubtree();

	}
	
	
	/**
	 * Faces the target and gives a drink.
	 */
	sequential behavior SCWaitOrGiveDrink(double r) {
		specificity 0;
		String gesture;
		mental_act {
			gesture = AnimationWME.Gestures.WAVE;
			Bot.println("SCWaitOrGiveDrink():0 Waiting on customer to select drink.");
		}

		subgoal Wait(25000);
		subgoal PlayGesture(gesture);
		subgoal Wait(2000);
		subgoal DetermineNextSubtree();
	}
	
	/**
	 * Gives the target a drink directly.
	 */
	sequential behavior SCWaitOrGiveDrink(double r) {
		specificity 1;
		precondition { 
			(ServiceCustomerWME customerName::name) 
			(r < 0.7d)
		}
		String drinkName;
		String gesture;
		mental_act {
			drinkName = DRINK_ITEMS[randomNumGen.nextInt(DRINK_ITEMS.length)];
			gesture = AnimationWME.Gestures.WAVE;
			Bot.println("SCWaitOrGiveDrink():1 Directly giving customer a " + drinkName + ".");
		}
		
		subgoal Wait(4000);
		act giveItem(drinkName, name) ;
		subgoal Wait(500);
		subgoal PlayGesture(gesture);
		subgoal Wait(6000);
		subgoal DetermineNextSubtree();
	}
	
	/**************************************************************************
	 * Non-subtree reactive behaviors.
	 *
	 *************************************************************************/
	sequential behavior WavedAt() {
		//waved at by a non-waiter
		SelfWME self;
		AvatarWME newAvatar;
		AnimationWME greetingAnim;
		String newAvatarName;
		with( success_test {
			!(ServiceCustomerWME)
			self=(SelfWME)
			newAvatar=(AvatarWME name::newAvatarName isWaiter == false)
			(AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.SOCIAL, newAvatar, self))
			greetingAnim=(AnimationWME avatarName==newAvatarName otherGazeAngle < 20.0)
			(greetingAnim.gestureName().equals(AnimationWME.Gestures.WAVE))
		} ) wait;
		
		mental_act { 
			BehavingEntity.getBehavingEntity().deleteWME(greetingAnim); 
			BehavingEntity.getBehavingEntity().addWME(new ServiceCustomerWME(newAvatarName, System.currentTimeMillis()));
		}
		
		subgoal Wait(1500);
		subgoal TurnAndWait(newAvatarName);
		//maybe wave, maybe nothing
		subgoal RespondToWave(newAvatarName);
		subgoal TransitionToServiceCustomer();
		subgoal Wait(30000);
	}
	
	sequential behavior RespondToWave(String avatarName) {
		specificity 1;
		precondition {
			(SelfWME sitting == false)
			(randomNumGen.nextDouble() < 0.6)
		}
		String gesture;
		mental_act { gesture = AnimationWME.Gestures.WAVE; }
		subgoal PlayGesture(gesture);
	}
	
	//default
	sequential behavior RespondToWave(String avatarName) {
		succeed_step;
	}
	
	sequential behavior ApproachedByCustomer() {
		// a non-waiter gets close and has direct gaze
		SelfWME self;
		AvatarWME newAvatar;
		AnimationWME greetingAnim;
		String newAvatarName;
		with( success_test {
			!(ServiceCustomerWME)
			!(LastCustomerWME)
			self = (SelfWME)
			newAvatar = (AvatarWME name::newAvatarName isWaiter==false isParticipant==false)
			(AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.PERSONAL, newAvatar, self))
			(AvatarWME.gazeAngleBetween(newAvatar, self) < 20.0)
		} ) wait;
		
		mental_act {
			Bot.println("Approached by a customer: " + newAvatarName);
			BehavingEntity.getBehavingEntity().addWME(new ServiceCustomerWME(newAvatarName, System.currentTimeMillis()));
		}
		
		subgoal Wait(1200);
		subgoal TurnAndWait(newAvatarName);
		subgoal Wait(1000);
		subgoal TransitionToServiceCustomer();
		subgoal Wait(15000);
	}
	
	sequential behavior ApproachedByParticipant() {
		// a non-waiter gets close and has direct gaze
		SelfWME self;
		AvatarWME newAvatar;
		String newAvatarName;
		with( success_test {
			!(ServiceCustomerWME)
			self = (SelfWME)
			newAvatar = (AvatarWME name::newAvatarName isWaiter==false isParticipant==true distanceFromSelf < 3.5)
			(AvatarWME.gazeAngleBetween(newAvatar, self) < 40.0)
		} ) wait;
		
		mental_act {
			Bot.println("Approached by a participant: " + newAvatarName);
			BehavingEntity.getBehavingEntity().addWME(new ServiceCustomerWME(newAvatarName, System.currentTimeMillis()));
		}
		
		subgoal Wait(1200);
		subgoal TurnAndWait(newAvatarName);
		subgoal Wait(1000);
		subgoal TransitionToServiceCustomer();
		subgoal Wait(20000);
	}
	
	
	//Approached by waiter while roaming
	sequential behavior ApproachedByWaiter() {
		// a waiter getst close and has direct gaze
		SelfWME self;
		AvatarWME newAvatar;
		AnimationWME greetingAnim;
		String newAvatarName;
		String yesGesture;
		with( success_test {
			!(ServiceCustomerWME)
			!(LastCustomerWME)
			(RoamWME)
			self = (SelfWME)
			newAvatar = (AvatarWME name::newAvatarName isWaiter==true)
			(AvatarWME.withinSocialDistance(AvatarWME.SocialDistance.PERSONAL, newAvatar, self))
			(AvatarWME.gazeAngleBetween(newAvatar, self) < 15.0)
		} ) wait;
		
		mental_act {
			yesGesture = AnimationWME.Gestures.YES;
			//The waiter isn't a customer, but this prevents us from repeatedly interacting with the waiter
			BehavingEntity.getBehavingEntity().addWME(new LastCustomerWME(System.currentTimeMillis()));
		
		}
		subgoal Wait(1500);
		subgoal TurnAndWait(newAvatarName);
		subgoal Wait(1500);
		subgoal PlayGesture(yesGesture);
		subgoal TransitionToBehindBar();
		subgoal Wait(20000);
		
	}
	
	/* 
	 * Always take drink from somebody (but don't drink from it - we are a waiter/waitress of course!)
	 */
	 sequential behavior TakeOfferedDrink() {
		String yesGesture;
		String drinkName;
		String avName;
		long drinkStartTime;
		ItemReceivedWME itemWME;
		with( success_test {
				itemWME = (ItemReceivedWME itemName::drinkName avatarName::avName)
				(ItemReceivedWME.isInList(drinkName, DRINK_ITEMS))
		}) wait;
		
		mental_act {
			
			yesGesture = AnimationWME.Gestures.YES;
		
			BehavingEntity.getBehavingEntity().deleteWME(itemWME);
		}
		subgoal Wait(1500);
		subgoal TurnAndWait(avName);
		subgoal Wait(1000);
		subgoal PlayGesture(yesGesture);
		subgoal Wait(8000);
	}
	
	
	//Get rid of last customer memory flag after 25 seconds, automatically
	sequential behavior Waiter_TimeoutLastCustomerMemory() {
		LastCustomerWME lcWME;
		with( success_test {
			lcWME = (LastCustomerWME lastContact::lastTime)
			(System.currentTimeMillis() - lastTime > 25000)
			
		}) wait;
		
		mental_act {
			BehavingEntity.getBehavingEntity().deleteWME(lcWME);
		}
	}
	
	sequential behavior ChooseRoamOrBehindBar() {
		specificity 2;
		precondition {
			(randomNumGen.nextDouble() < 0.5)
		}
		subgoal Wait(3000);
		subgoal TransitionToRoam();
	}
	
	sequential behavior ChooseRoamOrBehindBar() {
	
		subgoal Wait(3000);
		subgoal TransitionToBehindBar();
	}
	
	initial_tree {
		
		with (priority 1) subgoal ChooseRoamOrBehindBar();
		
		//behavior subtree entry points
		with(priority 10, persistent) subgoal EnterBehindBar();
		with(priority 10, persistent) subgoal EnterRoam();
		with(priority 10, persistent) subgoal EnterServiceCustomer();
		
		//global transitions
		with(priority 10, persistent) subgoal WavedAt();
		with(priority 10, persistent) subgoal ApproachedByCustomer();
		with(priority 15, persistent) subgoal ApproachedByParticipant();
		with(priority 10, persistent) subgoal ApproachedByWaiter();
		with(priority 10, persistent) subgoal TakeOfferedDrink();
		
		with(priority 10, persistent) subgoal Waiter_TimeoutLastCustomerMemory();
	}
}