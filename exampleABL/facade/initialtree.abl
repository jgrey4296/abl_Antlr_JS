// initialtree.abl


// #############
// ##
// ## OVERALL CONTROL
// ## a sequential behavior to enforce the sequence of initialization
// ##
sequential behavior OverallControl() {	
	WorkingMemory beatMemory;
	WorkingMemory storyMemory;
	boolean bReleaseBuild;
	boolean bDoStoryIntro;
	boolean bDoTitleSequence;

	mental_act {
		bReleaseBuild = true;			// if true, causes Trip to wait during launch for Grace to finish initializing
		bDoStoryIntro = true;			// if false, does not reposition player in foyer, disallows title sequence
		bDoTitleSequence = true;		// to get title sequence, set both bDoStoryIntro and bDoTitleSequence to true
	}


	mental_act { StringUtil.println("** Trip OverallControl"); }

	// without this, GraceMemory may not be ready yet, and we get invocation error
	with (ignore_failure) subgoal InitialWait(bReleaseBuild);

	// initializations

	mental_act { 
		// Trip is arbitrarily the team leader who sets these up
		beatMemory = WorkingMemory.lookupRegisteredMemory("BeatMemory");
		beatMemory.addWME(new DAMiscStatusWME()); 

		storyMemory = WorkingMemory.lookupRegisteredMemory("StoryMemory");
		if (randGen.nextInt(2) == 0) storyMemory.addWME(new ConverseStagingWME(true)); 
		else storyMemory.addWME(new ConverseStagingWME(false)); 

		storyMemory.addWME(new DeflectModeWME(eDeflectMode_minimal)); 

		// PostBeatMixinInfoWME now added and created in NLUMain
		// storyMemory.addWME(new PostBeatMixinInfoWME()); 

		// various performance wme's
		BehavingEntity.getBehavingEntity().addWME(new GazeWME(eSpriteID_NOTASPRITE, -1, -1, -1)); 
		BehavingEntity.getBehavingEntity().addWME(new UserTestWME(-1, -1, -1, -1)); 

		// PrevStagingInfoWME needed to not get confused by purposeful bits randomness in StagingInfoWME target
		BehavingEntity.getBehavingEntity().addWME(new PrevStagingInfoWME(0, 0, 0.0f, 0.0f, 0.0f, 0)); 

		BehavingEntity.getBehavingEntity().addWME(new SetPerfTempWME(false)); 
		BehavingEntity.getBehavingEntity().addWME(new SetPerfArmBaseWME(-1, -1, -1)); 
		BehavingEntity.getBehavingEntity().addWME(new DoGestureTempWME(0)); 
		BehavingEntity.getBehavingEntity().addWME(new MiscFlagWME(false, false)); 	
		BehavingEntity.getBehavingEntity().addWME(new TGChooseMixinTempWME(0)); 

		// this can be done up front
		TherapyGameState.state.InitTherapyGame();
	}

	// init mood manager
	subgoal InitMoodManager();

	// init body resource manager
	subgoal BodyResources_Initialize();	

	// init gaze
	subgoal DoGaze(0, eGazeType_normal, player);

	// amb inits that immediately return
	subgoal AmbInit_Fixdrink();
	subgoal AmbInit_Sipdrink();		

	// warm up nlp
	act setAnimEngineInfo(eSetAnimEngineInfo_warmUpNLP, -1);
	subgoal WaitFor(2);

	// ## title sequence, player chooses name, fade in
	with (ignore_failure) subgoal StoryIntro(bDoStoryIntro, bDoTitleSequence);	

	// ## START THE STORY -- the main parallel behavior
	with (ignore_failure) subgoal OverallControl_Body();

	// ## THE STORY IS NOW OVER
	// fade out
	act setAnimEngineInfo(eSetAnimEngineInfo_startFade, -1);
	subgoal WaitFor(3);
	// set player input to off
	act setAnimEngineInfo(eSetAnimEngineInfo_setPlayerInputActive, 0);

	
	subgoal WaitFor(5);
	act setAnimEngineInfo(eSetAnimEngineInfo_dramaComplete, -1);

	wait;
}


// #############
sequential behavior InitialWait(boolean bDoIt) {
	precondition { (bDoIt == true) }			
	mental_act { StringUtil.println("** Trip waiting to give a chance for everyone to load"); }
	subgoal WaitFor(35);	// fixme
}



// #############
sequential behavior StoryIntro(boolean bDoIt, boolean bDoTitleSequence) {
	precondition { (bDoIt == true) }			
	specificity 2;

	// signal to start FPS adjustment
	act setAnimEngineInfo(eSetAnimEngineInfo_startFPSAdjustment, 0);

	// be sure player input is off
	act setAnimEngineInfo(eSetAnimEngineInfo_setPlayerInputActive, 0);

	// cut to black
	act setAnimEngineInfo(eSetAnimEngineInfo_startFade, -100);

	// do the title sequence
	with (ignore_failure) subgoal StoryIntro_TitleSeq(bDoTitleSequence);

	// put Player at front door
	subgoal TeleportPlayer(-287.0, 309.0, 30.0);	// x, z, rot

	// close front door
	act setObjectRot(eSpriteID_frontDoor, 0.0, 30.0, 0.0);	

	// start choose name dialog
	act setAnimEngineInfo(eSetAnimEngineInfo_choosePlayerName, 0);

	// wait for animEngine to tell us the player's name and gender
	subgoal WaitForPlayerNameAndGestureInfoFromAnimEngine();

	subgoal WaitFor(2);

	// start the music playing
	mental_act { StringUtil.println("** Starting tension1 music"); }
	act music(eMusicAction_start, eMusicName_tension1); 

	subgoal WaitFor(5);

	// fade in
	act setAnimEngineInfo(eSetAnimEngineInfo_startFade, 2);

	// turn player input on
	act setAnimEngineInfo(eSetAnimEngineInfo_setPlayerInputActive, 1);
}


// ## for development -- it skips the title sequence, does not reposition player
sequential behavior StoryIntro(boolean bDoIt, boolean bDoTitleSequence) {
	precondition { StoryMemory storyStatusWME = (StoryStatusWME) }
	specificity 1;
	act setAnimEngineInfo(eSetAnimEngineInfo_startFPSAdjustment, 0);
	act setAnimEngineInfo(eSetAnimEngineInfo_setPlayerInputActive, 0);
	act setAnimEngineInfo(eSetAnimEngineInfo_choosePlayerName, 0);	
	subgoal WaitForPlayerNameAndGestureInfoFromAnimEngine();
	act setAnimEngineInfo(eSetAnimEngineInfo_setPlayerInputActive, 1);
}


// do the title sequence
sequential behavior StoryIntro_TitleSeq(boolean bDoTitleSequence) {
	precondition { (bDoTitleSequence == true) }			

	// hold black for a few seconds
	//subgoal WaitFor(1);	

	// start the music playing
	//act music(eMusicAction_start, eMusicName_title); 

	//subgoal WaitFor(5);	

	// title sequence
	act setAnimEngineInfo(eSetAnimEngineInfo_startTitleSequence, 0);

	// anim engine signals with this
	with (success_test { PlayerMemory (PlayerRecentlyTypedTextWME b == true) } ) wait;
}


// #############
sequential behavior EndExperience() {
	subgoal FailGoal("OverallControl_Body()");
	// fixme: need to also kill off all the spawned managers, etc.
}

// #############
collection behavior OverallControl_Body() {

	// the beatgoals
	with (persistent) subgoal TheBeatRoot();

	// ## discourse act filters and handlers -- organized into priority groups, to control the order of evaluation
	// these used to be in leader BeatHandlers(), but it was causing a hang when handlerDA() was running across beat boundary
	with (persistent, ignore_failure, priority 52) subgoal preHandlerFilterDA_CheckDAHandlersActive();
	//with (ignore_failure, priority 51) subgoal preHandlerFilterDA_CheckBeatCommitPoint();	// fixme: do we need this?  // we do not want persistent; we want the handler to die off eventually
	with (persistent, priority 51) subgoal handlerMapPlayerGestureToDA();
	with (persistent, priority 51) subgoal handlerMapPlayerPhysicallyFavorToDA();
	with (persistent, priority 50) subgoal handlerDA();
	with (persistent, priority 50) subgoal demon_setNLPProcessing_flag();
	with (persistent, priority 50) subgoal demon_setCurBGSig();

	// monitor and update ThisRef
	with (persistent, priority 30) subgoal Handler_UpdateThisRef();

	// monitor and update youRef as one character becomes visible or not. 
	with (persistent, priority 30, property isOneCharacterVisibleYouRefHandler true) 
		subgoal Handler_OneCharacterVisible();

	// ## comment out the lines below for tracing diagnostics

	// mood performance
	with (persistent, priority 30) subgoal MoodManager();

	// autonomous mixin behaviors, prioritized
	with (priority 44) subgoal AmbInit_MetaCommentary();
	with (priority 43) subgoal AmbInit_Lightenup(); 
	with (priority 42) subgoal AmbInit_Fixdrinkopt(); 
	with (priority 41) subgoal AmbInit_DreamrecAndEightball(); 

	// sip drink performance
	with (persistent, priority 30) subgoal Handler_SipDrinkOverTime(); 

	// monitor player clicking on elevator button (ends experience)
	with (persistent) subgoal MonitorPlayerClickingOnElevatorButton();

	subgoal WaitForMusicChangeAtTension1b();
	subgoal WaitForMusicChangeAtTension2();

	// user testing
	with (persistent) subgoal UserTestingDemon();

	//subgoal OverallControl_Body_ForTesting();
}


sequential behavior WaitForMusicChangeAtTension1b() {
	subgoal WaitForMusicChangeAtTension1b_test();
	mental_act { StringUtil.println("** Starting tension1b music"); }
	act music(eMusicAction_start, eMusicName_tension1b); 
}

parallel behavior WaitForMusicChangeAtTension1b_test() {
	number_needed_for_success 1;
	with (success_test { StoryMemory	(TensionStoryValueWME value == 1.0f) 
										(StoryStatusWME affinity != eAffinity_neutral)
						} ) wait;
	with (success_test { StoryMemory	(TensionStoryValueWME value == 1.0f)
										(StoryStatusWME beatCountOfLastGreetingBeat == 4
														beatCount == 6)
						} ) wait;
	with (success_test { StoryMemory	(TensionStoryValueWME value == 1.0f)
										(StoryStatusWME beatCountOfLastGreetingBeat == 3
														beatCount == 5)
						} ) wait;
}

sequential behavior WaitForMusicChangeAtTension2() {
	with (success_test { StoryMemory (TensionStoryValueWME value == 2.0f) } ) wait;
	mental_act { StringUtil.println("** Starting tension2 music"); }
	act music(eMusicAction_start, eMusicName_tension2); 
}



/*
//fixme remove -- used for testing fixdrink amb's without needing to run the fixdrink beat
sequential behavior OverallControl_Body_ForTesting() {
	subgoal SetFixDrink_PlayerDrink(eDrink_martiniCosmo);
	subgoal SetFixDrink_TripDrink(eDrink_martiniCosmo);
	subgoal SetFixDrink_GraceDrink(eDrink_martiniCosmo);
	subgoal SetBeatFlagInStoryMemory("ReadyToDecideToDoFixdrinkoptAmb");
	subgoal bFAskDrink_GoFixDrinkAtBarIfNotAlready();
}
*/



// #############
// ## initial tree

initial_tree {
	subgoal OverallControl();
}


}	// behaving_entity TripBeatBehaviors 

