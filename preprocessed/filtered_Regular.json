[
    {
        "type": "behavingEntity",
        "name": "Regular",
        "conflicts": [
            {
                "type": "conflictDeclaration",
                "first": "walkTo",
                "second": [
                    "walkTo"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "turnTowards",
                "second": [
                    "turnTowards"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "playGesture",
                "second": [
                    "playGesture"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "sitOn",
                "second": [
                    "sitOn"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "stand",
                "second": [
                    "stand"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "nudgeMove",
                "second": [
                    "nudgeMove"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "walkTo",
                "second": [
                    "turnTowards",
                    "playGesture"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "walkToObject",
                "second": [
                    "turnTowards",
                    "playGesture"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "walkToObjectById",
                "second": [
                    "turnTowards",
                    "playGesture"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "nudgeRotate",
                "second": [
                    "nudgeRotate"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "wearItem",
                "second": [
                    "wearItem"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "removeItem",
                "second": [
                    "removeItem"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "giveItem",
                "second": [
                    "giveItem"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "walkToObject",
                "second": [
                    "walkTo"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "walkToObjectById",
                "second": [
                    "walkTo"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "walkToObject",
                "second": [
                    "walkToObjectById"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "touchObject",
                "second": [
                    "touchObject"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "touchObject",
                "second": [
                    "touchObjectById"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "touchObjectById",
                "second": [
                    "touchObjectById"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "lookAtObject",
                "second": [
                    "lookAtObject"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "lookAtObjectById",
                "second": [
                    "lookAtObject"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "lookAtObjectById",
                "second": [
                    "lookAtObjectById"
                ]
            },
            {
                "type": "conflictDeclaration",
                "first": "PlayGesture",
                "second": [
                    "PlayGesture"
                ]
            }
        ],
        "declarations": [
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "walkTo",
                    "target": "WalkTo",
                    "params": [
                        {
                            "type": "param",
                            "varType": "double"
                        },
                        {
                            "type": "param",
                            "varType": "double"
                        },
                        {
                            "type": "param",
                            "varType": "double"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "walkTo",
                    "target": "WalkTo",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "turnTowards",
                    "target": "TurnTowards",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "turnTowards",
                    "target": "TurnTowards",
                    "params": [
                        {
                            "type": "param",
                            "varType": "double"
                        },
                        {
                            "type": "param",
                            "varType": "double"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "turnTowards",
                    "target": "TurnTowards",
                    "params": [
                        {
                            "type": "param",
                            "varType": "double"
                        },
                        {
                            "type": "param",
                            "varType": "double"
                        },
                        {
                            "type": "param",
                            "varType": "double"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "turnTowards",
                    "target": "TurnTowards",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        },
                        {
                            "type": "param",
                            "varType": "Double"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "playGesture",
                    "target": "PlayGesture",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "debugPrint",
                    "target": "DebugPrint",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "sitOn",
                    "target": "SitOn",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "sitOnById",
                    "target": "SitOnById",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "stand",
                    "target": "Stand",
                    "params": []
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "stopMovement",
                    "target": "Stop",
                    "params": []
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "nudgeMove",
                    "target": "NudgeMove",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "nudgeMove",
                    "target": "NudgeMove",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        },
                        {
                            "type": "param",
                            "varType": "Double"
                        },
                        {
                            "type": "param",
                            "varType": "SelfWME"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "nudgeMove",
                    "target": "NudgeMove",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        },
                        {
                            "type": "param",
                            "varType": "Double"
                        },
                        {
                            "type": "param",
                            "varType": "SelfWME"
                        },
                        {
                            "type": "param",
                            "varType": "AvatarWME"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "nudgeRotate",
                    "target": "NudgeRotate",
                    "params": [
                        {
                            "type": "param",
                            "varType": "double"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "nudgeRotate",
                    "target": "NudgeRotate",
                    "params": [
                        {
                            "type": "param",
                            "varType": "Double"
                        },
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "walkToObject",
                    "target": "WalkToObject",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "walkToObjectById",
                    "target": "WalkToObjectById",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "wearItem",
                    "target": "WearItem",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "removeItem",
                    "target": "RemoveItem",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "giveItem",
                    "target": "GiveItem",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        },
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "touchObject",
                    "target": "TouchObject",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "touchObject",
                    "target": "TouchObject",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        },
                        {
                            "type": "param",
                            "varType": "Boolean"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "touchObject",
                    "target": "TouchObject",
                    "params": []
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "touchObjectById",
                    "target": "TouchObjectById",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "touchObjectById",
                    "target": "TouchObjectById",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        },
                        {
                            "type": "param",
                            "varType": "Boolean"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "touchObjectById",
                    "target": "TouchObjectById",
                    "params": []
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "lookAtObject",
                    "target": "LookAtObject",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "lookAtObjectById",
                    "target": "LookAtObjectById",
                    "params": [
                        {
                            "type": "param",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "actionRegistration",
                    "name": "resetHead",
                    "target": "ResetHead",
                    "params": []
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "PERSONAL_BUFFER",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "1.5",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "randomNumGen",
                    "varType": "Random",
                    "value": "Random(System.currentTimeMillis())"
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "TrueObject",
                    "varType": "Boolean",
                    "value": "Boolean(true)"
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "FalseObject",
                    "varType": "Boolean",
                    "value": "Boolean(false)"
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "DRINK_ITEMS",
                    "varType": "String[]",
                    "value": "String[]{\"Straw-Banana Daiquiri\",\"Margarita\",\"MANHATTAN\",\"Bloody Mary\",\"Pina Colada\",\"Cabernet\",\"Key Lime Colada\",\"Draft Beer\",\"Long Island Ice Tea\",\"Frosty Mug\",\"Tropical Paradise\",\"Blue Raspberry Colada\"}"
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "barFrontX",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "161.42",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "barFrontY",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "221.60",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "barFrontZ",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "23.82",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "barBehindX",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "157.67",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "barBehindY",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "222.76",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "barBehindZ",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "24.2",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "stageX",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "166.103",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "stageY",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "233.183",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "stageZ",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "24.312",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "faceBarFromStageX",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "165.976",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "faceBarFromStageY",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "231.348",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "ablVariableDeclaration",
                    "name": "faceBarFromStageZ",
                    "varType": "double",
                    "value": {
                        "type": "ablLiteral",
                        "value": "24.29",
                        "varType": "float"
                    }
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "wmeDeclaration",
                    "name": "AngryWME",
                    "variables": [
                        {
                            "type": "ablVariableDeclaration",
                            "name": "lastIncident",
                            "varType": "long"
                        },
                        {
                            "type": "ablVariableDeclaration",
                            "name": "strength",
                            "varType": "double"
                        },
                        {
                            "type": "ablVariableDeclaration",
                            "name": "name",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "wmeDeclaration",
                    "name": "LastStateWME",
                    "variables": [
                        {
                            "type": "ablVariableDeclaration",
                            "name": "stateName",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "wmeDeclaration",
                    "name": "PerformGestureWME",
                    "variables": [
                        {
                            "type": "ablVariableDeclaration",
                            "name": "isResponse",
                            "varType": "boolean"
                        },
                        {
                            "type": "ablVariableDeclaration",
                            "name": "targetName",
                            "varType": "String"
                        },
                        {
                            "type": "ablVariableDeclaration",
                            "name": "gestureName",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "wmeDeclaration",
                    "name": "GetDrinkWME",
                    "variables": [
                        {
                            "type": "ablVariableDeclaration",
                            "name": "name",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "wmeDeclaration",
                    "name": "StageDanceWME",
                    "variables": [
                        {
                            "type": "ablVariableDeclaration",
                            "name": "startTime",
                            "varType": "long"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "wmeDeclaration",
                    "name": "SoloDanceWME",
                    "variables": [
                        {
                            "type": "ablVariableDeclaration",
                            "name": "target",
                            "varType": "String"
                        },
                        {
                            "type": "ablVariableDeclaration",
                            "name": "performer",
                            "varType": "boolean"
                        },
                        {
                            "type": "ablVariableDeclaration",
                            "name": "lastDanceTime",
                            "varType": "long"
                        },
                        {
                            "type": "ablVariableDeclaration",
                            "name": "startTime",
                            "varType": "long"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "wmeDeclaration",
                    "name": "AutoPilotWME",
                    "variables": [
                        {
                            "type": "ablVariableDeclaration",
                            "name": "z",
                            "varType": "double"
                        },
                        {
                            "type": "ablVariableDeclaration",
                            "name": "y",
                            "varType": "double"
                        },
                        {
                            "type": "ablVariableDeclaration",
                            "name": "x",
                            "varType": "double"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "wmeDeclaration",
                    "name": "HaveDrinkWME",
                    "variables": [
                        {
                            "type": "ablVariableDeclaration",
                            "name": "startTime",
                            "varType": "long"
                        },
                        {
                            "type": "ablVariableDeclaration",
                            "name": "name",
                            "varType": "String"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "wmeDeclaration",
                    "name": "GreetWME",
                    "variables": [
                        {
                            "type": "ablVariableDeclaration",
                            "name": "targetName",
                            "varType": "String"
                        },
                        {
                            "type": "ablVariableDeclaration",
                            "name": "startTime",
                            "varType": "long"
                        }
                    ]
                }
            },
            {
                "type": "ablDeclaration",
                "declare": {
                    "type": "wmeDeclaration",
                    "name": "FaceGroupWME",
                    "variables": [
                        {
                            "type": "ablVariableDeclaration",
                            "name": "name",
                            "varType": "String"
                        }
                    ]
                }
            }
        ],
        "behaviours": [
            {
                "type": "behaviourDefinition",
                "name": "HumanLocationAdjustment",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "startTime",
                        "varType": "long"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "randomRotateDeg",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "translationCase",
                        "varType": "int"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "SelfWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "sitting",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "false"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "AutoPilotWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "conditionalExpression",
                                                                    "value": {
                                                                        "type": "conditionalExpression",
                                                                        "clauses": [
                                                                            [
                                                                                {
                                                                                    "type": "binaryOp",
                                                                                    "expression": [
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "javaMethod",
                                                                                            "value": {
                                                                                                "type": "javaMethod",
                                                                                                "bang": false,
                                                                                                "name": "System.currentTimeMillis",
                                                                                                "params": []
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "name",
                                                                                            "value": "startTime"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "default"
                                                                            ]
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "3500",
                                                                        "varType": "int"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "greaterThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "RandomNudgeMove",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "translationCase"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "nudgeRotate",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "randomRotateDeg"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "RandomNudgeMove",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "int",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "translationCase"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "translationCase"
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "-1",
                                                                "varType": "int"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "greaterThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "direction",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "nudgeMove",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "direction"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "RandomNudgeMove",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "int",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "translationCase"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "translationCase"
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "-1",
                                                                "varType": "int"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "equal",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "basicStep",
                            "value": "succeed"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "ClearDrinksInHand",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "wearItem",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\"MANHATTAN\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "750",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "removeItem",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\"MANHATTAN\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TimeoutDrink",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "drinkName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "drinkStartTime",
                        "varType": "long"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "drinkWME",
                        "varType": "HaveDrinkWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "drinkWME",
                                                "wmeType": "HaveDrinkWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "startTime",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "drinkStartTime"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "drinkName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "conditionalExpression",
                                                                    "value": {
                                                                        "type": "conditionalExpression",
                                                                        "clauses": [
                                                                            [
                                                                                {
                                                                                    "type": "binaryOp",
                                                                                    "expression": [
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "javaMethod",
                                                                                            "value": {
                                                                                                "type": "javaMethod",
                                                                                                "bang": false,
                                                                                                "name": "System.currentTimeMillis",
                                                                                                "params": []
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "name",
                                                                                            "value": "drinkStartTime"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "default"
                                                                            ]
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "140000",
                                                                        "varType": "int"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "greaterThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "removeItem",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "drinkName"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "AlwaysTakeDrink",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "drinkName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "avName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "drinkStartTime",
                        "varType": "long"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "itemWME",
                        "varType": "ItemReceivedWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "itemWME",
                                                "wmeType": "ItemReceivedWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "avName"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "itemName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "drinkName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "ItemReceivedWME.isInList",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "drinkName"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "DRINK_ITEMS"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "2000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\";)\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "wearItem",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "drinkName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "10000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "PlayGesture",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "gestureName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "2",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "AnimationWME.isDance",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "gestureName"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SelfWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "selfName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "ObjectWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "objectId",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "objId"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "ownerName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "selfName"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"footobject\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.65",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "350",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "playGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "gestureName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "PlayGesture",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "gestureName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SelfWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "selfName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "ObjectWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "objectId",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "objId"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "ownerName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "selfName"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"footobject\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.5",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "lookAtObjectById",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "objId"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "2500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "resetHead",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "50",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "resetHead",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "playGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "gestureName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "PlayGesture",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "gestureName"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "350",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "playGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "gestureName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "StandIfSitting",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SelfWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "sitting",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "true"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "stand",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "StandIfSitting",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SelfWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "sitting",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "false"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "basicStep",
                            "value": "succeed"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Wait",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "int",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "millis"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "startTime",
                        "varType": "long"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "conditionalExpression",
                                                                    "value": {
                                                                        "type": "conditionalExpression",
                                                                        "clauses": [
                                                                            [
                                                                                {
                                                                                    "type": "binaryOp",
                                                                                    "expression": [
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "javaMethod",
                                                                                            "value": {
                                                                                                "type": "javaMethod",
                                                                                                "bang": false,
                                                                                                "name": "System.currentTimeMillis",
                                                                                                "params": []
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "name",
                                                                                            "value": "startTime"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "default"
                                                                            ]
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "name",
                                                                    "value": "millis",
                                                                    "cast": "long"
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "greaterThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TurnAndWait",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "turnTowards",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "700",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TurnAndWait",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "x"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "y"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "turnTowards",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "x"
                                },
                                {
                                    "type": "param",
                                    "varType": "y"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "700",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "WalkAndWait",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "x"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "y"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "z"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "buffer",
                        "varType": "double"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "10",
                                        "varType": "int"
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "DoWalkAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "x"
                                },
                                {
                                    "type": "param",
                                    "varType": "y"
                                },
                                {
                                    "type": "param",
                                    "varType": "z"
                                },
                                {
                                    "type": "param",
                                    "varType": "buffer"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "WalkAndWait",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "x"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "y"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "z"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "buffer"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "10",
                                        "varType": "int"
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "DoWalkAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "x"
                                },
                                {
                                    "type": "param",
                                    "varType": "y"
                                },
                                {
                                    "type": "param",
                                    "varType": "z"
                                },
                                {
                                    "type": "param",
                                    "varType": "buffer"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "DoWalkAndWait",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "x"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "y"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "z"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "buffer"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SelfWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "z",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "myZ"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "y",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "myY"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "x",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "myX"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "startTime",
                        "varType": "long"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "currentDistance",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "normX",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "normY",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "newX",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "newY",
                        "varType": "double"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "walkTo",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "newX"
                                },
                                {
                                    "type": "param",
                                    "varType": "newY"
                                },
                                {
                                    "type": "param",
                                    "varType": "z"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "conditionalExpression",
                                                                    "value": {
                                                                        "type": "conditionalExpression",
                                                                        "clauses": [
                                                                            [
                                                                                {
                                                                                    "type": "binaryOp",
                                                                                    "expression": [
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "conditionalExpression",
                                                                                            "value": {
                                                                                                "type": "conditionalExpression",
                                                                                                "clauses": [
                                                                                                    [
                                                                                                        {
                                                                                                            "type": "binaryOp",
                                                                                                            "expression": [
                                                                                                                {
                                                                                                                    "type": "ablExpression",
                                                                                                                    "varType": "conditionalExpression",
                                                                                                                    "value": {
                                                                                                                        "type": "conditionalExpression",
                                                                                                                        "clauses": [
                                                                                                                            [
                                                                                                                                {
                                                                                                                                    "type": "binaryOp",
                                                                                                                                    "expression": [
                                                                                                                                        {
                                                                                                                                            "type": "ablExpression",
                                                                                                                                            "varType": "conditionalExpression",
                                                                                                                                            "value": {
                                                                                                                                                "type": "conditionalExpression",
                                                                                                                                                "clauses": [
                                                                                                                                                    [
                                                                                                                                                        {
                                                                                                                                                            "type": "binaryOp",
                                                                                                                                                            "expression": [
                                                                                                                                                                {
                                                                                                                                                                    "type": "ablExpression",
                                                                                                                                                                    "varType": "conditionalExpression",
                                                                                                                                                                    "value": {
                                                                                                                                                                        "type": "conditionalExpression",
                                                                                                                                                                        "clauses": [
                                                                                                                                                                            [
                                                                                                                                                                                {
                                                                                                                                                                                    "type": "binaryOp",
                                                                                                                                                                                    "expression": [
                                                                                                                                                                                        {
                                                                                                                                                                                            "type": "ablExpression",
                                                                                                                                                                                            "varType": "javaMethod",
                                                                                                                                                                                            "value": {
                                                                                                                                                                                                "type": "javaMethod",
                                                                                                                                                                                                "bang": false,
                                                                                                                                                                                                "name": "Math.abs",
                                                                                                                                                                                                "params": [
                                                                                                                                                                                                    {
                                                                                                                                                                                                        "type": "param",
                                                                                                                                                                                                        "varType": "binaryOp",
                                                                                                                                                                                                        "value": {
                                                                                                                                                                                                            "type": "binaryOp",
                                                                                                                                                                                                            "expression": [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    "type": "ablExpression",
                                                                                                                                                                                                                    "varType": "javaMethod",
                                                                                                                                                                                                                    "value": {
                                                                                                                                                                                                                        "type": "javaMethod",
                                                                                                                                                                                                                        "bang": false,
                                                                                                                                                                                                                        "name": "self.getX",
                                                                                                                                                                                                                        "params": []
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                },
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    "type": "ablExpression",
                                                                                                                                                                                                                    "varType": "name",
                                                                                                                                                                                                                    "value": "newX"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            ]
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                ]
                                                                                                                                                                                            }
                                                                                                                                                                                        },
                                                                                                                                                                                        {
                                                                                                                                                                                            "type": "ablExpression",
                                                                                                                                                                                            "varType": "ablLiteral",
                                                                                                                                                                                            "value": {
                                                                                                                                                                                                "type": "ablLiteral",
                                                                                                                                                                                                "value": "1.5",
                                                                                                                                                                                                "varType": "float"
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "operator": {
                                                                                                                                                                                        "type": "operator",
                                                                                                                                                                                        "opType": "lessEqual",
                                                                                                                                                                                        "possibleOps": [
                                                                                                                                                                                            "_bind",
                                                                                                                                                                                            "greaterThan",
                                                                                                                                                                                            "greaterEqual",
                                                                                                                                                                                            "lessThan",
                                                                                                                                                                                            "lessEqual",
                                                                                                                                                                                            "equal",
                                                                                                                                                                                            "notEqual"
                                                                                                                                                                                        ]
                                                                                                                                                                                    }
                                                                                                                                                                                },
                                                                                                                                                                                "default"
                                                                                                                                                                            ]
                                                                                                                                                                        ]
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            ]
                                                                                                                                                        },
                                                                                                                                                        "default"
                                                                                                                                                    ],
                                                                                                                                                    [
                                                                                                                                                        {
                                                                                                                                                            "type": "binaryOp",
                                                                                                                                                            "expression": [
                                                                                                                                                                {
                                                                                                                                                                    "type": "ablExpression",
                                                                                                                                                                    "varType": "javaMethod",
                                                                                                                                                                    "value": {
                                                                                                                                                                        "type": "javaMethod",
                                                                                                                                                                        "bang": false,
                                                                                                                                                                        "name": "Math.abs",
                                                                                                                                                                        "params": [
                                                                                                                                                                            {
                                                                                                                                                                                "type": "param",
                                                                                                                                                                                "varType": "binaryOp",
                                                                                                                                                                                "value": {
                                                                                                                                                                                    "type": "binaryOp",
                                                                                                                                                                                    "expression": [
                                                                                                                                                                                        {
                                                                                                                                                                                            "type": "ablExpression",
                                                                                                                                                                                            "varType": "javaMethod",
                                                                                                                                                                                            "value": {
                                                                                                                                                                                                "type": "javaMethod",
                                                                                                                                                                                                "bang": false,
                                                                                                                                                                                                "name": "self.getY",
                                                                                                                                                                                                "params": []
                                                                                                                                                                                            }
                                                                                                                                                                                        },
                                                                                                                                                                                        {
                                                                                                                                                                                            "type": "ablExpression",
                                                                                                                                                                                            "varType": "name",
                                                                                                                                                                                            "value": "newY"
                                                                                                                                                                                        }
                                                                                                                                                                                    ]
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        ]
                                                                                                                                                                    }
                                                                                                                                                                },
                                                                                                                                                                {
                                                                                                                                                                    "type": "ablExpression",
                                                                                                                                                                    "varType": "ablLiteral",
                                                                                                                                                                    "value": {
                                                                                                                                                                        "type": "ablLiteral",
                                                                                                                                                                        "value": "1.5",
                                                                                                                                                                        "varType": "float"
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            ],
                                                                                                                                                            "operator": {
                                                                                                                                                                "type": "operator",
                                                                                                                                                                "opType": "lessEqual",
                                                                                                                                                                "possibleOps": [
                                                                                                                                                                    "_bind",
                                                                                                                                                                    "greaterThan",
                                                                                                                                                                    "greaterEqual",
                                                                                                                                                                    "lessThan",
                                                                                                                                                                    "lessEqual",
                                                                                                                                                                    "equal",
                                                                                                                                                                    "notEqual"
                                                                                                                                                                ]
                                                                                                                                                            }
                                                                                                                                                        },
                                                                                                                                                        "and"
                                                                                                                                                    ]
                                                                                                                                                ]
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                "default"
                                                                                                                            ]
                                                                                                                        ]
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        "default"
                                                                                                    ],
                                                                                                    [
                                                                                                        {
                                                                                                            "type": "binaryOp",
                                                                                                            "expression": [
                                                                                                                {
                                                                                                                    "type": "ablExpression",
                                                                                                                    "varType": "javaMethod",
                                                                                                                    "value": {
                                                                                                                        "type": "javaMethod",
                                                                                                                        "bang": false,
                                                                                                                        "name": "System.currentTimeMillis",
                                                                                                                        "params": []
                                                                                                                    }
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "ablExpression",
                                                                                                                    "varType": "name",
                                                                                                                    "value": "startTime"
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        "or"
                                                                                                    ]
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "ablLiteral",
                                                                                            "value": {
                                                                                                "type": "ablLiteral",
                                                                                                "value": "4000",
                                                                                                "varType": "int"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "operator": {
                                                                                        "type": "operator",
                                                                                        "opType": "greaterThan",
                                                                                        "possibleOps": [
                                                                                            "_bind",
                                                                                            "greaterThan",
                                                                                            "greaterEqual",
                                                                                            "lessThan",
                                                                                            "lessEqual",
                                                                                            "equal",
                                                                                            "notEqual"
                                                                                        ]
                                                                                    }
                                                                                },
                                                                                "default"
                                                                            ]
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "basicStep",
                            "value": "succeed"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "WalkAndWait",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "targetName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "buffer"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "z",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetZ"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "y",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetY"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "x",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetX"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetName"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "WalkAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "targetX"
                                },
                                {
                                    "type": "param",
                                    "varType": "targetY"
                                },
                                {
                                    "type": "param",
                                    "varType": "targetZ"
                                },
                                {
                                    "type": "param",
                                    "varType": "buffer"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "WalkAndWait",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "targetName"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "10",
                                        "varType": "int"
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "DoWalkAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "targetName"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "DoWalkAndWait",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "targetName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "self",
                                        "wmeType": "SelfWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "z",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetZ"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "y",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetY"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "x",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetX"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetName"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "startTime",
                        "varType": "long"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "walkTo",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "targetName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "conditionalExpression",
                                                                    "value": {
                                                                        "type": "conditionalExpression",
                                                                        "clauses": [
                                                                            [
                                                                                {
                                                                                    "type": "binaryOp",
                                                                                    "expression": [
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "conditionalExpression",
                                                                                            "value": {
                                                                                                "type": "conditionalExpression",
                                                                                                "clauses": [
                                                                                                    [
                                                                                                        {
                                                                                                            "type": "binaryOp",
                                                                                                            "expression": [
                                                                                                                {
                                                                                                                    "type": "ablExpression",
                                                                                                                    "varType": "conditionalExpression",
                                                                                                                    "value": {
                                                                                                                        "type": "conditionalExpression",
                                                                                                                        "clauses": [
                                                                                                                            [
                                                                                                                                {
                                                                                                                                    "type": "binaryOp",
                                                                                                                                    "expression": [
                                                                                                                                        {
                                                                                                                                            "type": "ablExpression",
                                                                                                                                            "varType": "conditionalExpression",
                                                                                                                                            "value": {
                                                                                                                                                "type": "conditionalExpression",
                                                                                                                                                "clauses": [
                                                                                                                                                    [
                                                                                                                                                        {
                                                                                                                                                            "type": "binaryOp",
                                                                                                                                                            "expression": [
                                                                                                                                                                {
                                                                                                                                                                    "type": "ablExpression",
                                                                                                                                                                    "varType": "conditionalExpression",
                                                                                                                                                                    "value": {
                                                                                                                                                                        "type": "conditionalExpression",
                                                                                                                                                                        "clauses": [
                                                                                                                                                                            [
                                                                                                                                                                                {
                                                                                                                                                                                    "type": "binaryOp",
                                                                                                                                                                                    "expression": [
                                                                                                                                                                                        {
                                                                                                                                                                                            "type": "ablExpression",
                                                                                                                                                                                            "varType": "javaMethod",
                                                                                                                                                                                            "value": {
                                                                                                                                                                                                "type": "javaMethod",
                                                                                                                                                                                                "bang": false,
                                                                                                                                                                                                "name": "Math.abs",
                                                                                                                                                                                                "params": [
                                                                                                                                                                                                    {
                                                                                                                                                                                                        "type": "param",
                                                                                                                                                                                                        "varType": "binaryOp",
                                                                                                                                                                                                        "value": {
                                                                                                                                                                                                            "type": "binaryOp",
                                                                                                                                                                                                            "expression": [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    "type": "ablExpression",
                                                                                                                                                                                                                    "varType": "javaMethod",
                                                                                                                                                                                                                    "value": {
                                                                                                                                                                                                                        "type": "javaMethod",
                                                                                                                                                                                                                        "bang": false,
                                                                                                                                                                                                                        "name": "self.getX",
                                                                                                                                                                                                                        "params": []
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                },
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    "type": "ablExpression",
                                                                                                                                                                                                                    "varType": "name",
                                                                                                                                                                                                                    "value": "targetX"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            ]
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                ]
                                                                                                                                                                                            }
                                                                                                                                                                                        },
                                                                                                                                                                                        {
                                                                                                                                                                                            "type": "ablExpression",
                                                                                                                                                                                            "varType": "ablLiteral",
                                                                                                                                                                                            "value": {
                                                                                                                                                                                                "type": "ablLiteral",
                                                                                                                                                                                                "value": "1.0",
                                                                                                                                                                                                "varType": "float"
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    ],
                                                                                                                                                                                    "operator": {
                                                                                                                                                                                        "type": "operator",
                                                                                                                                                                                        "opType": "lessEqual",
                                                                                                                                                                                        "possibleOps": [
                                                                                                                                                                                            "_bind",
                                                                                                                                                                                            "greaterThan",
                                                                                                                                                                                            "greaterEqual",
                                                                                                                                                                                            "lessThan",
                                                                                                                                                                                            "lessEqual",
                                                                                                                                                                                            "equal",
                                                                                                                                                                                            "notEqual"
                                                                                                                                                                                        ]
                                                                                                                                                                                    }
                                                                                                                                                                                },
                                                                                                                                                                                "default"
                                                                                                                                                                            ]
                                                                                                                                                                        ]
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            ]
                                                                                                                                                        },
                                                                                                                                                        "default"
                                                                                                                                                    ],
                                                                                                                                                    [
                                                                                                                                                        {
                                                                                                                                                            "type": "binaryOp",
                                                                                                                                                            "expression": [
                                                                                                                                                                {
                                                                                                                                                                    "type": "ablExpression",
                                                                                                                                                                    "varType": "javaMethod",
                                                                                                                                                                    "value": {
                                                                                                                                                                        "type": "javaMethod",
                                                                                                                                                                        "bang": false,
                                                                                                                                                                        "name": "Math.abs",
                                                                                                                                                                        "params": [
                                                                                                                                                                            {
                                                                                                                                                                                "type": "param",
                                                                                                                                                                                "varType": "binaryOp",
                                                                                                                                                                                "value": {
                                                                                                                                                                                    "type": "binaryOp",
                                                                                                                                                                                    "expression": [
                                                                                                                                                                                        {
                                                                                                                                                                                            "type": "ablExpression",
                                                                                                                                                                                            "varType": "javaMethod",
                                                                                                                                                                                            "value": {
                                                                                                                                                                                                "type": "javaMethod",
                                                                                                                                                                                                "bang": false,
                                                                                                                                                                                                "name": "self.getY",
                                                                                                                                                                                                "params": []
                                                                                                                                                                                            }
                                                                                                                                                                                        },
                                                                                                                                                                                        {
                                                                                                                                                                                            "type": "ablExpression",
                                                                                                                                                                                            "varType": "name",
                                                                                                                                                                                            "value": "targetY"
                                                                                                                                                                                        }
                                                                                                                                                                                    ]
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        ]
                                                                                                                                                                    }
                                                                                                                                                                },
                                                                                                                                                                {
                                                                                                                                                                    "type": "ablExpression",
                                                                                                                                                                    "varType": "ablLiteral",
                                                                                                                                                                    "value": {
                                                                                                                                                                        "type": "ablLiteral",
                                                                                                                                                                        "value": "1.0",
                                                                                                                                                                        "varType": "float"
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            ],
                                                                                                                                                            "operator": {
                                                                                                                                                                "type": "operator",
                                                                                                                                                                "opType": "lessEqual",
                                                                                                                                                                "possibleOps": [
                                                                                                                                                                    "_bind",
                                                                                                                                                                    "greaterThan",
                                                                                                                                                                    "greaterEqual",
                                                                                                                                                                    "lessThan",
                                                                                                                                                                    "lessEqual",
                                                                                                                                                                    "equal",
                                                                                                                                                                    "notEqual"
                                                                                                                                                                ]
                                                                                                                                                            }
                                                                                                                                                        },
                                                                                                                                                        "and"
                                                                                                                                                    ]
                                                                                                                                                ]
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                "default"
                                                                                                                            ]
                                                                                                                        ]
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        "default"
                                                                                                    ],
                                                                                                    [
                                                                                                        {
                                                                                                            "type": "binaryOp",
                                                                                                            "expression": [
                                                                                                                {
                                                                                                                    "type": "ablExpression",
                                                                                                                    "varType": "javaMethod",
                                                                                                                    "value": {
                                                                                                                        "type": "javaMethod",
                                                                                                                        "bang": false,
                                                                                                                        "name": "System.currentTimeMillis",
                                                                                                                        "params": []
                                                                                                                    }
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "ablExpression",
                                                                                                                    "varType": "name",
                                                                                                                    "value": "startTime"
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        "or"
                                                                                                    ]
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "ablLiteral",
                                                                                            "value": {
                                                                                                "type": "ablLiteral",
                                                                                                "value": "4000",
                                                                                                "varType": "int"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "operator": {
                                                                                        "type": "operator",
                                                                                        "opType": "greaterThan",
                                                                                        "possibleOps": [
                                                                                            "_bind",
                                                                                            "greaterThan",
                                                                                            "greaterEqual",
                                                                                            "lessThan",
                                                                                            "lessEqual",
                                                                                            "equal",
                                                                                            "notEqual"
                                                                                        ]
                                                                                    }
                                                                                },
                                                                                "default"
                                                                            ]
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "basicStep",
                            "value": "succeed"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "MaintainMinSocialDistance",
                "behType": "parallel",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TimeoutAnger",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "WaitForBump",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TimeoutAnger",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "lastTime",
                        "varType": "long"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "angerWME",
                        "varType": "AngryWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "angerWME",
                                                "wmeType": "AngryWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "lastIncident",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "lastTime"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "conditionalExpression",
                                                                    "value": {
                                                                        "type": "conditionalExpression",
                                                                        "clauses": [
                                                                            [
                                                                                {
                                                                                    "type": "binaryOp",
                                                                                    "expression": [
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "javaMethod",
                                                                                            "value": {
                                                                                                "type": "javaMethod",
                                                                                                "bang": false,
                                                                                                "name": "System.currentTimeMillis",
                                                                                                "params": []
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "name",
                                                                                            "value": "lastTime"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "default"
                                                                            ]
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "25000",
                                                                        "varType": "int"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "greaterThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "WaitForBump",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "a",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "nudgeDir",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "avatarName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "avatarName"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "y",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "otherY"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "x",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "otherX"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "y",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "selfY"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "x",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "selfX"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.INTIMATE"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "AutoPilotWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "KeepDistancePerformance",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                },
                                {
                                    "type": "param",
                                    "varType": "nudgeDir"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "KeepDistancePerformance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "nudgeDirection"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "GroupMemberWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "300",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "nudgeMove",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "nudgeDirection"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "KeepDistancePerformance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "nudgeDirection"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": true,
                                        "wmeType": "GroupMemberWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": true,
                                        "wmeType": "AngryWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "300",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "2000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "nudgeMove",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "nudgeDirection"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "KeepDistancePerformance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "nudgeDirection"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "anger",
                                        "wmeType": "AngryWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "lastIncident",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "lastTime"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "strength",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "oldStrength"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "strength",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "lessThan",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "1.0",
                                                        "varType": "float"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "conditionalExpression",
                                                            "value": {
                                                                "type": "conditionalExpression",
                                                                "clauses": [
                                                                    [
                                                                        {
                                                                            "type": "binaryOp",
                                                                            "expression": [
                                                                                {
                                                                                    "type": "ablExpression",
                                                                                    "varType": "javaMethod",
                                                                                    "value": {
                                                                                        "type": "javaMethod",
                                                                                        "bang": false,
                                                                                        "name": "System.currentTimeMillis",
                                                                                        "params": []
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ablExpression",
                                                                                    "varType": "name",
                                                                                    "value": "lastTime"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "default"
                                                                    ]
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "15000",
                                                                "varType": "int"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "300",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "nudgeMove",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "nudgeDirection"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "700",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\"/no\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "KeepDistancePerformance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "nudgeDirection"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "anger",
                                        "wmeType": "AngryWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "lastIncident",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "lastTime"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "strength",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "oldStrength"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "strength",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "greaterThan",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "1.0",
                                                        "varType": "float"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "conditionalExpression",
                                                            "value": {
                                                                "type": "conditionalExpression",
                                                                "clauses": [
                                                                    [
                                                                        {
                                                                            "type": "binaryOp",
                                                                            "expression": [
                                                                                {
                                                                                    "type": "ablExpression",
                                                                                    "varType": "javaMethod",
                                                                                    "value": {
                                                                                        "type": "javaMethod",
                                                                                        "bang": false,
                                                                                        "name": "System.currentTimeMillis",
                                                                                        "params": []
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ablExpression",
                                                                                    "varType": "name",
                                                                                    "value": "lastTime"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "default"
                                                                    ]
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "15000",
                                                                "varType": "int"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "nudgeMove",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "nudgeDirection"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "100",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\"/scold\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "ShuffleWME",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "wmeType"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EliminateDuplicateAnimationEvents",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "anim1",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "anim2",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "selfName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "animName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "avName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "animTime1",
                        "varType": "long"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "animTime2",
                        "varType": "long"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "selfName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "anim1",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "timeMS",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "animTime1"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "animationName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "animName"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "avName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "anim2",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "timeMS",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "animTime2"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "animationName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "animName"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "avName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "name",
                                                                    "value": "anim1"
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "name",
                                                                    "value": "anim2"
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "notEqual",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "Math.abs",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "binaryOp",
                                                                                "value": {
                                                                                    "type": "binaryOp",
                                                                                    "expression": [
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "name",
                                                                                            "value": "animTime1"
                                                                                        },
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "name",
                                                                                            "value": "animTime2"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "100",
                                                                        "varType": "int"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "lessThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CleanForTransition",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "ccWME",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CleanForTransition",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "gdWME",
                                        "wmeType": "GetDrinkWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CleanForTransition",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "gWME",
                                        "wmeType": "GreetWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CleanForTransition",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "soloWME",
                                        "wmeType": "SoloDanceWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CleanForTransition",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToPreviousSubtree",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "LastStateWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "stateName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"ChatCircle\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToChatCircle",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToPreviousSubtree",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "LastStateWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "stateName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"DanceCircle\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToDanceCircle",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToPreviousSubtree",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "LastStateWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "stateName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"GetDrink\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToGetDrink",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToPreviousSubtree",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "LastStateWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "stateName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"StageDance\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToStageDance",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToPreviousSubtree",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "LastStateWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "stateName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"Greet\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToStageDance",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToPreviousSubtree",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "LastStateWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "stateName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"SoloDance\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToStageDance",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToPreviousSubtree",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "0",
                                "varType": "int"
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToChatCircle",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToStageDance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToGetDrink",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "MakeAGetDrinkWME",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToChatCircle",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToDanceCircle",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToGreet",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "targetName"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "TransitionToSoloDance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "boolean",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "performer"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "target"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterStageDance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "sd",
                        "varType": "StageDanceWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "sd",
                                                "wmeType": "StageDanceWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "WalkAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "stageX"
                                },
                                {
                                    "type": "param",
                                    "varType": "stageY"
                                },
                                {
                                    "type": "param",
                                    "varType": "stageZ"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "faceBarFromStageX"
                                },
                                {
                                    "type": "param",
                                    "varType": "faceBarFromStageY"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "1",
                                        "varType": "int"
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "SD_Master",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SD_Master",
                "behType": "parallel",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "contextCondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "StageDanceWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "HumanLocationAdjustment",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "MaintainMinSocialDistance",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "SD_TransitionOut",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "SD_PerformStageDance",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "SD_ContinueDancing",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SD_PerformStageDance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "danceGestureName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "danceGestureName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SD_ContinueDancing",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "stageDanceWME",
                                        "wmeType": "StageDanceWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "danceAnim",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "targetAvatar",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "avName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "danceAnim",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isDance",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "avName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "targetAvatar",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "avName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "targetAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "SD_RespondToStageDanceDanceGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avName"
                                },
                                {
                                    "type": "param",
                                    "varType": "danceAnim"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SD_RespondToStageDanceDanceGesture",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "AnimationWME",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "danceAnim"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "stageDanceWME",
                                        "wmeType": "StageDanceWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "GroupMemberWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "turnTowards",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SD_RespondToStageDanceDanceGesture",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "AnimationWME",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "danceAnim"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": true,
                                        "wmeType": "GroupMemberWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "turnTowards",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SD_TransitionOut",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "StageDanceWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "startTime",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "sdStartTime"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "System.currentTimeMillis",
                                                                        "params": []
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "name",
                                                                    "value": "sdStartTime"
                                                                }
                                                            ],
                                                            "tailOperator": {
                                                                "type": "operator",
                                                                "opType": "greaterThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            },
                                                            "tailBinaryOp": {
                                                                "type": "binaryOp",
                                                                "expression": [
                                                                    {
                                                                        "type": "ablExpression",
                                                                        "varType": "ablLiteral",
                                                                        "value": {
                                                                            "type": "ablLiteral",
                                                                            "value": "35000",
                                                                            "varType": "int"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToChatCircle",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterGetWaiterDrink",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "waiterAvatar",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "ChatCircleWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "HaveDrinkWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "waiterAvatar",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isWaiter",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.PERSONAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "waiterAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.gazeAngleBetween",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "waiterAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "35.0",
                                                                        "varType": "float"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "lessThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToGetDrink",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterGetDrink",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GetDrinkWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "1",
                                        "varType": "int"
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "GD_Master",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "GD_Master",
                "behType": "parallel",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "contextCondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "GetDrinkWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "50",
                                        "varType": "int"
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "ShuffleWME",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\"AvatarWME\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "GD_Performance",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "HumanLocationAdjustment",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "MaintainMinSocialDistance",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "GD_Performance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": true,
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "distanceFromSelf",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "lessThan",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "3.0",
                                                        "varType": "float"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "isWaiter",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "true"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "ObjectWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "objectId",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "objId"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"BARTENDER hsr03\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "boredGesture",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "pointYouGesture",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "winkBangGesture",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "drinkName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "WalkAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "barFrontX"
                                },
                                {
                                    "type": "param",
                                    "varType": "barFrontY"
                                },
                                {
                                    "type": "param",
                                    "varType": "barFrontZ"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "turnTowards",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "barBehindX"
                                },
                                {
                                    "type": "param",
                                    "varType": "barBehindY"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "touchObjectById",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "objId"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "2500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "touchObjectById",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "350",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "touchObjectById",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "250",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "touchObjectById",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "wearItem",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "drinkName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "winkBangGesture"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToPreviousSubtree",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "GD_Performance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "2",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "distanceFromSelf",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "lessThan",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "3.0",
                                                        "varType": "float"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "isWaiter",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "true"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "ObjectWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "objectId",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "objId"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"BARTENDER hsr02\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "ownerName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetName"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "GD_PerformanceWithWaiter",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "targetName"
                                },
                                {
                                    "type": "param",
                                    "varType": "objId"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "GD_Performance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "distanceFromSelf",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "lessThan",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "6.0",
                                                        "varType": "float"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "isWaiter",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "true"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "ObjectWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "objectId",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "objId"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"BARTENDER hsr02\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "ownerName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "targetName"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "GD_PerformanceWithWaiter",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "targetName"
                                },
                                {
                                    "type": "param",
                                    "varType": "objId"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "GD_PerformanceWithWaiter",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "waiterName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "bartenderObjectId"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "boredGesture",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "pointYouGesture",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "winkBangGesture",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "drinkName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "waveGesture",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "waiterName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "waveGesture"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "WalkAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "waiterName"
                                },
                                {
                                    "type": "param",
                                    "varType": "PERSONAL_BUFFER"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "waiterName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "touchObjectById",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "bartenderObjectId"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "2500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "touchObjectById",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "350",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "touchObjectById",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "250",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "touchObjectById",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "wearItem",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "drinkName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "200",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "winkBangGesture"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToPreviousSubtree",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterDanceCircle",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "DanceCircleWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "1",
                                        "varType": "int"
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "DC_Master",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterDanceCircleFromOthersDancing",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "a1",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "a2",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "anim1",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "anim2",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "ChatCircleWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a1",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a2",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "notEqual",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": true,
                                                                        "name": "a1Name.equals",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2Name"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "anim1",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isDance",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "anim2",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isDance",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AnimationWME.isSimultaneous",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "anim1"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "anim2"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a1"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a1"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ],
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "or"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToDanceCircle",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "15000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "DC_Master",
                "behType": "parallel",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "contextCondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "DanceCircleWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "HumanLocationAdjustment",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Regular_BeNearAGroupMember",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "DC_Facing",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "DC_MonitorDanceCircle",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "5",
                                        "varType": "int"
                                    }
                                }
                            },
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "DC_JoinGroupDance",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "DC_KeepDancing",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "DC_TransitionOut",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "DC_Perform",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "DC_Facing",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Regular_FaceGroup",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3400",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "DC_MonitorDanceCircle",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "aName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "animation",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "gestureNameToPlay",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "incomingGesture",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "danceCircleWME",
                        "varType": "DanceCircleWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "animWME",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "response",
                        "varType": "boolean"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "gazeAngle",
                        "varType": "double"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "aName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "aName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "animWME",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "otherGazeAngle",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "gazeAngle"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "animationName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "animation"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "aName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "conditionalExpression",
                                                                    "value": {
                                                                        "type": "conditionalExpression",
                                                                        "clauses": [
                                                                            [
                                                                                {
                                                                                    "type": "binaryOp",
                                                                                    "expression": [
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "conditionalExpression",
                                                                                            "value": {
                                                                                                "type": "conditionalExpression",
                                                                                                "clauses": [
                                                                                                    [
                                                                                                        {
                                                                                                            "type": "binaryOp",
                                                                                                            "expression": [
                                                                                                                {
                                                                                                                    "type": "ablExpression",
                                                                                                                    "varType": "javaMethod",
                                                                                                                    "value": {
                                                                                                                        "type": "javaMethod",
                                                                                                                        "bang": false,
                                                                                                                        "name": "animWME.getIsDance",
                                                                                                                        "params": []
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        "default"
                                                                                                    ]
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "default"
                                                                            ],
                                                                            [
                                                                                {
                                                                                    "type": "binaryOp",
                                                                                    "expression": [
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "javaMethod",
                                                                                            "value": {
                                                                                                "type": "javaMethod",
                                                                                                "bang": false,
                                                                                                "name": "animWME.getIsGesture",
                                                                                                "params": []
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "or"
                                                                            ]
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "danceCircleWME",
                                                "wmeType": "DanceCircleWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "DC_KeepDancing",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "dcWME",
                        "varType": "DanceCircleWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "myLastDanceTime",
                        "varType": "long"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "danceGestureName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "dcWME",
                                                "wmeType": "DanceCircleWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "myLastDanceTime",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "myLastDanceTime"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "System.currentTimeMillis",
                                                                        "params": []
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "name",
                                                                    "value": "myLastDanceTime"
                                                                }
                                                            ],
                                                            "tailOperator": {
                                                                "type": "operator",
                                                                "opType": "greaterThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            },
                                                            "tailBinaryOp": {
                                                                "type": "binaryOp",
                                                                "expression": [
                                                                    {
                                                                        "type": "ablExpression",
                                                                        "varType": "ablLiteral",
                                                                        "value": {
                                                                            "type": "ablLiteral",
                                                                            "value": "2000",
                                                                            "varType": "int"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "DC_JoinGroupDance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "a1",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "a2",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "anim1",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "anim2",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "perfGestureWME",
                        "varType": "PerformGestureWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a1",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a2",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "notEqual",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": true,
                                                                        "name": "a1Name.equals",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2Name"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "anim1",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isDance",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "animationName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "anim1Name"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "anim2",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isDance",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "animationName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "anim1Name"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AnimationWME.isSimultaneous",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "anim1"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "anim2"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a1"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a1"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ],
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "or"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "DC_Perform",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "gesture",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "gestureTargetName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "perfGestureWME",
                        "varType": "PerformGestureWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "dcWME",
                        "varType": "DanceCircleWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "timeToNextPerformance",
                        "varType": "int"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "response",
                        "varType": "boolean"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "perfGestureWME",
                                                "wmeType": "PerformGestureWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isResponse",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "response"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "targetName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "gestureTargetName"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "gestureName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "gesture"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "dcWME",
                                                "wmeType": "DanceCircleWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "100",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "ignoreFailure",
                                "modValue": 0
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Regular_TurnToIfNamed",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "gestureTargetName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "gesture"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "timeToNextPerformance"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "DC_TransitionOut",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "DanceCircleWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "lastDanceTime",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "lastDanceT"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "System.currentTimeMillis",
                                                                        "params": []
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "name",
                                                                    "value": "lastDanceT"
                                                                }
                                                            ],
                                                            "tailOperator": {
                                                                "type": "operator",
                                                                "opType": "greaterThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            },
                                                            "tailBinaryOp": {
                                                                "type": "binaryOp",
                                                                "expression": [
                                                                    {
                                                                        "type": "ablExpression",
                                                                        "varType": "ablLiteral",
                                                                        "value": {
                                                                            "type": "ablLiteral",
                                                                            "value": "15000",
                                                                            "varType": "int"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToPreviousSubtree",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterSoloDance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "SoloDanceWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "1",
                                        "varType": "int"
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "SO_Master",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterSoloDanceAsPerformer",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "a1",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "a2",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "clap1",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "clap2",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "selfAnim",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "SoloDanceWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "selfName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a1",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a2",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "notEqual",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": true,
                                                                        "name": "a1Name.equals",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2Name"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "selfAnim",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isDance",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "selfName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "clap1",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "otherGazeAngle",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "lessThan",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "15.0",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "animationName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "anim1Name"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "clap2",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "otherGazeAngle",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "lessThan",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "15.0",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "animationName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "anim1Name"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "clap1.gestureName",
                                                                        "params": [],
                                                                        "chain": {
                                                                            "type": "javaMethod",
                                                                            "bang": false,
                                                                            "name": "equals",
                                                                            "params": [
                                                                                {
                                                                                    "type": "param",
                                                                                    "varType": "AnimationWME.Gestures.CLAP"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "clap2.gestureName",
                                                                        "params": [],
                                                                        "chain": {
                                                                            "type": "javaMethod",
                                                                            "bang": false,
                                                                            "name": "equals",
                                                                            "params": [
                                                                                {
                                                                                    "type": "param",
                                                                                    "varType": "AnimationWME.Gestures.CLAP"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a1"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a1"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ],
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "or"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToSoloDance",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "true"
                                },
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\"\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "5000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterSoloDanceAsAudienceMeAndOther",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "otherAvatar",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "dancerAvatar",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "clap1",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "clap2",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "danceAnim",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "dancerName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "SoloDanceWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "myName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "otherAvatar",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "otherName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "dancerAvatar",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "dancerName"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "notEqual",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "otherName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "otherName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "dancerName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "clap1",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "otherName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "clap1.gestureName",
                                                                        "params": [],
                                                                        "chain": {
                                                                            "type": "javaMethod",
                                                                            "bang": false,
                                                                            "name": "equals",
                                                                            "params": [
                                                                                {
                                                                                    "type": "param",
                                                                                    "varType": "AnimationWME.Gestures.CLAP"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.gazeAngleBetween",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "otherAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "dancerAvatar"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "15.0",
                                                                        "varType": "float"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "lessThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "clap2",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "myName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "clap2.gestureName",
                                                                        "params": [],
                                                                        "chain": {
                                                                            "type": "javaMethod",
                                                                            "bang": false,
                                                                            "name": "equals",
                                                                            "params": [
                                                                                {
                                                                                    "type": "param",
                                                                                    "varType": "AnimationWME.Gestures.CLAP"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.gazeAngleBetween",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "dancerAvatar"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "15.0",
                                                                        "varType": "float"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "lessThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "danceAnim",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isDance",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "dancerName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "otherAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "dancerAvatar"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "otherAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ],
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "dancerAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "or"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToSoloDance",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "false"
                                },
                                {
                                    "type": "param",
                                    "varType": "dancerName"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterSoloDanceAsAudience",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "a1",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "a2",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "targetAvatar",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "clap1",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "clap2",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "danceAnim",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "targetName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "SoloDanceWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a1",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a2",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "notEqual",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "targetAvatar",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "targetName"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "notEqual",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "notEqual",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "targetName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "clap1",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "animationName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "anim1Name"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a1Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "clap1.gestureName",
                                                                        "params": [],
                                                                        "chain": {
                                                                            "type": "javaMethod",
                                                                            "bang": false,
                                                                            "name": "equals",
                                                                            "params": [
                                                                                {
                                                                                    "type": "param",
                                                                                    "varType": "AnimationWME.Gestures.CLAP"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.gazeAngleBetween",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a1"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "targetAvatar"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "15.0",
                                                                        "varType": "float"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "lessThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "clap2",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "animationName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "anim1Name"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "a2Name"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "clap2.gestureName",
                                                                        "params": [],
                                                                        "chain": {
                                                                            "type": "javaMethod",
                                                                            "bang": false,
                                                                            "name": "equals",
                                                                            "params": [
                                                                                {
                                                                                    "type": "param",
                                                                                    "varType": "AnimationWME.Gestures.CLAP"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.gazeAngleBetween",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "targetAvatar"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "15.0",
                                                                        "varType": "float"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "lessThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "danceAnim",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isDance",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "targetName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a1"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "targetAvatar"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "targetAvatar"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a1"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ],
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a2"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "or"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToSoloDance",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "false"
                                },
                                {
                                    "type": "param",
                                    "varType": "targetName"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SO_Master",
                "behType": "parallel",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "contextCondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SoloDanceWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "HumanLocationAdjustment",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "MaintainMinSocialDistance",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "SO_TransitionOut",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Regular_BeNearAGroupMember",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "SO_Perform",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "SO_ContinueSoloDancing",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SO_Perform",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SoloDanceWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "performer",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "true"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "danceGestureName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "danceGestureName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SO_Perform",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SoloDanceWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "performer",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "false"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "clapGestureName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "clapGestureName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SO_ContinueSoloDancing",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "sdWME",
                                        "wmeType": "SoloDanceWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "performer",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "true"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "someAnim",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "targetAvatar",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "avName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "someAnim",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "avName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "someAnim.gestureName",
                                                                        "params": [],
                                                                        "chain": {
                                                                            "type": "javaMethod",
                                                                            "bang": false,
                                                                            "name": "equals",
                                                                            "params": [
                                                                                {
                                                                                    "type": "param",
                                                                                    "varType": "AnimationWME.Gestures.CLAP"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "targetAvatar",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "avName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "avName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "targetAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "turnTowards",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SO_ContinueSoloDancing",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "sdWME",
                                        "wmeType": "SoloDanceWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "target",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "performerAvatar"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "performer",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "false"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "someAnim",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "targetAvatar",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "someAnim",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isDance",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "performerAvatar"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "targetAvatar",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "performerAvatar"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "performerAvatar"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "targetAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "turnTowards",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "performerAvatar"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "SO_TransitionOut",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "SoloDanceWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "startTime",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "sdStartTime"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "System.currentTimeMillis",
                                                                        "params": []
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "name",
                                                                    "value": "sdStartTime"
                                                                }
                                                            ],
                                                            "tailOperator": {
                                                                "type": "operator",
                                                                "opType": "greaterThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            },
                                                            "tailBinaryOp": {
                                                                "type": "binaryOp",
                                                                "expression": [
                                                                    {
                                                                        "type": "ablExpression",
                                                                        "varType": "ablLiteral",
                                                                        "value": {
                                                                            "type": "ablLiteral",
                                                                            "value": "20000",
                                                                            "varType": "int"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToPreviousSubtree",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterGreeting",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GreetWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "1",
                                        "varType": "int"
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "GR_Master",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterDetectGreetingByGroupMember",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "acceptanceAnim",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "newAvatarName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "groupMemberName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "ChatCircleWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "newAvatar",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isWaiter",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "false"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "newAvatarName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "newAvatarName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "groupAvatar",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "groupMemberName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "groupMemberName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "newAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "groupAvatar"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "acceptanceAnim",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "groupMemberName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "acceptanceAnim.gestureName",
                                                                        "params": [],
                                                                        "chain": {
                                                                            "type": "javaMethod",
                                                                            "bang": false,
                                                                            "name": "equals",
                                                                            "params": [
                                                                                {
                                                                                    "type": "param",
                                                                                    "varType": "AnimationWME.Gestures.YES_BANG"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.gazeAngleBetween",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "groupAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "newAvatar"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "15.0",
                                                                        "varType": "float"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "lessThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterGreetingFromChatCircle",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "newAvatar",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "greetingAnim",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "newAvatarName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "ChatCircleWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "newAvatar",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isWaiter",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "false"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "newAvatarName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "newAvatarName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "newAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "greetingAnim",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "otherGazeAngle",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "lessThan",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "35.0",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "newAvatarName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "greetingAnim.gestureName",
                                                                        "params": [],
                                                                        "chain": {
                                                                            "type": "javaMethod",
                                                                            "bang": false,
                                                                            "name": "equals",
                                                                            "params": [
                                                                                {
                                                                                    "type": "param",
                                                                                    "varType": "AnimationWME.Gestures.WAVE"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToGreet",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "newAvatarName"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterGreetingFromChatCircleWithParticipant",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "self",
                        "varType": "SelfWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "newAvatar",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "greetingAnim",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "newAvatarName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "ChatCircleWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "newAvatar",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isParticipant",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isWaiter",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "false"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "newAvatarName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "newAvatarName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "newAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.gazeAngleBetween",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "newAvatar"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "25.0",
                                                                        "varType": "float"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "lessThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "greetingAnim",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isGesture",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "otherGazeAngle",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "lessThan",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "45.0",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "newAvatarName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "randomNumGen.nextDouble",
                                                                        "params": []
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "0.35",
                                                                        "varType": "float"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "lessThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToGreet",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "newAvatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "15000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "GR_Master",
                "behType": "parallel",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "contextCondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "GreetWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "targetName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "HumanLocationAdjustment",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "MaintainMinSocialDistance",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "GR_TransitionOut",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "GR_Perform",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "GR_Perform",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "gestureName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "gestureName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToPreviousSubtree",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "GR_TransitionOut",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GreetWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "startTime",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "greetStartTime"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "System.currentTimeMillis",
                                                                        "params": []
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "name",
                                                                    "value": "greetStartTime"
                                                                }
                                                            ],
                                                            "tailOperator": {
                                                                "type": "operator",
                                                                "opType": "greaterThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            },
                                                            "tailBinaryOp": {
                                                                "type": "binaryOp",
                                                                "expression": [
                                                                    {
                                                                        "type": "ablExpression",
                                                                        "varType": "ablLiteral",
                                                                        "value": {
                                                                            "type": "ablLiteral",
                                                                            "value": "25000",
                                                                            "varType": "int"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToPreviousSubtree",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "EnterChatCircle",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "ChatCircleWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "1",
                                        "varType": "int"
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "CC_Master",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_Master",
                "behType": "parallel",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "contextCondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "HumanLocationAdjustment",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "MaintainMinSocialDistance",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Regular_BeNearAGroupMember",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "CC_Facing",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "5000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "CC_MonitorConversation",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "CC_UpdateConversationMemory",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "priorityModifier",
                                "modValue": {
                                    "type": "priorityModifier",
                                    "value": {
                                        "type": "ablLiteral",
                                        "value": "10",
                                        "varType": "int"
                                    }
                                }
                            },
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "CC_Perform",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "CC_ManagePerformanceInitiation",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "CC_SitMonitor",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "persistence",
                                "modValue": {
                                    "type": "persistence"
                                }
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "CC_StandMonitor",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_ManagePerformanceInitiation",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "ccWME",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "5100",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "ignoreFailure",
                                "modValue": 0
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "CC_InitiateFromIdle",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_InitiateFromIdle",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "0",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "cc",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "timeSinceLastGesture",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "t"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "t"
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "20000",
                                                                "varType": "int"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "greaterThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ],
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "t"
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "35000",
                                                                "varType": "int"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "and"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.6",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": true,
                                        "wmeType": "AngryWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "gestureToPlay",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_InitiateFromIdle",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "cc",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "timeSinceLastGesture",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "t"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "t"
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "45000",
                                                                "varType": "int"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "greaterThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ],
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "t"
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "65000",
                                                                "varType": "int"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "and"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": true,
                                        "wmeType": "AngryWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\"/pointyou\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "4000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\"/nya\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_InitiateFromIdle",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "2",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "cc",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.6",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "cc.getTimeSinceLastGesture",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "85000",
                                                                "varType": "int"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "greaterThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": true,
                                        "wmeType": "AngryWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "StandIfSitting",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "2000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToGetDrink",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_InitiateFromIdle",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "3",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "LastStateWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "stateName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"StageDance\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.6",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "cc",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "cc.getTimeSinceLastGesture",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "85000",
                                                                "varType": "int"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "greaterThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": true,
                                        "wmeType": "AngryWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "StandIfSitting",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "2000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToGetDrink",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_InitiateFromIdle",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "3",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "LastStateWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "stateName",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "ablLiteral",
                                                    "value": {
                                                        "type": "ablLiteral",
                                                        "value": "\"GetDrink\"",
                                                        "varType": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.6",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "cc",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "cc.getTimeSinceLastGesture",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "85000",
                                                                "varType": "int"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "greaterThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": true,
                                        "wmeType": "AngryWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "StandIfSitting",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "2000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TransitionToStageDance",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_Perform",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "gesture",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "gestureTargetName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "pgWME",
                        "varType": "PerformGestureWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "timeToNextPerformance",
                        "varType": "int"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "response",
                        "varType": "boolean"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "pgWME",
                                                "wmeType": "PerformGestureWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isResponse",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "response"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "targetName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "gestureTargetName"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "gestureName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "gesture"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "ignoreFailure",
                                "modValue": 0
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Regular_TurnToIfNamed",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "gestureTargetName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "gesture"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "timeToNextPerformance"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_UpdateConversationMemory",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "chatCircleWME",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "decayDelay",
                        "varType": "int"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "decayDelay"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_SitMonitor",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "objId",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "targetX",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "targetY",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "targetZ",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "ccWME",
                        "varType": "ChatCircleWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "sitting",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "false"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "sitting",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "aName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "aName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "ccWME",
                                                "wmeType": "ChatCircleWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "objWME",
                                                "wmeType": "ObjectWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "z",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "targetZ"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "y",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "targetY"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "x",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "targetX"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isSeat",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "objectId",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "objId"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "distanceFromSelf",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "lessThan",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "2.0",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "ObjectWME.distanceBetween",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "objWME"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "2.0",
                                                                        "varType": "float"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "greaterThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "AngryWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "targetX"
                                },
                                {
                                    "type": "param",
                                    "varType": "targetY"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "touchObjectById",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "objId"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "touchObjectById",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "touchObjectById",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "300",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "sitOnById",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "objId"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "sitOnById",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "objId"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_StandMonitor",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "ccWME",
                        "varType": "ChatCircleWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isGroupMember",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "sitting",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "aName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "sitting",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "ccWME",
                                                "wmeType": "ChatCircleWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "stand",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "stand",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "stand",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_MonitorConversation",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "aName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "animation",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "gestureNameToPlay",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "incomingGesture",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "chatCircleWME",
                        "varType": "ChatCircleWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "animWME",
                        "varType": "AnimationWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "response",
                        "varType": "boolean"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "targetName",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "ShuffleWME",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\"AnimationWME\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "a",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "aName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "self",
                                                "wmeType": "SelfWME",
                                                "fieldTests": []
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "aName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "a"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "self"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "animWME",
                                                "wmeType": "AnimationWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isGesture",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "animationName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "animation"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "avatarName",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "aName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "chatCircleWME",
                                                "wmeType": "ChatCircleWME",
                                                "fieldTests": []
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "ignoreFailure",
                                "modValue": 0
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "CC_RespondToConversation",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "animWME"
                                },
                                {
                                    "type": "param",
                                    "varType": "incomingGesture"
                                },
                                {
                                    "type": "param",
                                    "varType": "aName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "2000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_RespondToConversation",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "AnimationWME",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "anim"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "gestureName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "ccWME",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.6",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "AnimationWME.Gestures.EMBARRASSED.equals",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "gestureName"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_RespondToConversation",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "AnimationWME",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "anim"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "gestureName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "ccWME",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.6",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "AnimationWME.Gestures.BOW.equals",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "gestureName"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_RespondToConversation",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "AnimationWME",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "anim"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "gestureName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "ccWME",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.6",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "AnimationWME.Gestures.NO_BANG.equals",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "gestureName"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_RespondToConversation",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "AnimationWME",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "anim"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "gestureName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.6",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "ccWME",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "AnimationWME.Gestures.CRY.equals",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "gestureName"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_RespondToConversation",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "AnimationWME",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "anim"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "gestureName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "ccWME",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "AnimationWME.Gestures.POINTYOU.equals",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "gestureName"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_RespondToConversation",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "AnimationWME",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "anim"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "gestureName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SelfWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "sitting",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "false"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "ccWME",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "anim.getIsDance",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "equal",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.4",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_RespondToConversation",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "AnimationWME",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "anim"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "gestureName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SelfWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "sitting",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "false"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "ccWME",
                                        "wmeType": "ChatCircleWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "anim.getIsDance",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "equal",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "randomNumGen.nextDouble",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "0.4",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "avatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_RespondToConversation",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "AnimationWME",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "anim"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "gestureName"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "2000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "CC_Facing",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "int",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "updateInterval"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SelfWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "sitting",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "false"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "groupCenterWME",
                        "varType": "GroupCenterWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "turnX",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "turnY",
                        "varType": "double"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "updateInterval"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Regular_FaceGroup",
                            "params": []
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_TurnToIfNamed",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "name"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": true,
                                                                "name": "name.equals",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "value": {
                                                                            "type": "ablExpression",
                                                                            "varType": "ablLiteral",
                                                                            "value": {
                                                                                "type": "ablLiteral",
                                                                                "value": "\"\"",
                                                                                "varType": "string"
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "turnTowards",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "name"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_FaceGroup",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "3",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "self",
                                        "wmeType": "SelfWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "a",
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "GroupMemberWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "AvatarWME.gazeAngleBetween",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "self"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "a"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "90.0",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "AvatarWME.withinSocialDistance",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "a"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "self"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "totalX",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "totalY",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "totalZ",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "count",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "destX",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "destY",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "a",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "avTarget",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "destX"
                                },
                                {
                                    "type": "param",
                                    "varType": "destY"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "ignoreFailure",
                                "modValue": 0
                            }
                        ],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Regular_FaceGroupKeepDistance",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "destX"
                                },
                                {
                                    "type": "param",
                                    "varType": "destY"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_FaceGroupKeepDistance",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "targetX"
                        }
                    },
                    {
                        "type": "param",
                        "varType": "double",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "targetY"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "SelfWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "y",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "selfY"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "x",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "selfX"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "SensorUtilities.DistanceBetween",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "selfX"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "selfY"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "targetX"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "targetY"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "AvatarWME.SocialDistanceThresholdValues.INTIMATE"
                                                        }
                                                    ],
                                                    "operator": {
                                                        "type": "operator",
                                                        "opType": "lessThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "direction",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "primitiveAct",
                            "name": "nudgeMove",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "direction"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_TimeinGroupMembership",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "potentialGroupMember",
                        "varType": "AvatarWME"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "potentialGroupMember",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isWaiter",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "false"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "avName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "avName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "name": "regular",
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isRegular",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "gmName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "gmName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "javaMethod",
                                                                    "value": {
                                                                        "type": "javaMethod",
                                                                        "bang": false,
                                                                        "name": "AvatarWME.withinSocialDistance",
                                                                        "params": [
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "AvatarWME.SocialDistance.PERSONAL"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "regular"
                                                                            },
                                                                            {
                                                                                "type": "param",
                                                                                "varType": "potentialGroupMember"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Regular_AddPotentialGroupMember",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "potentialGroupMember"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_AddPotentialGroupMember",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "AvatarWME",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "potentialGroupMember"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "contextCondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "regular",
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "isRegular",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "true"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "gmName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "GroupMemberWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "gmName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "AvatarWME.withinSocialDistance",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "AvatarWME.SocialDistance.PERSONAL"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "regular"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "potentialGroupMember"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "newGroupMemberName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "winkBangGesture",
                        "varType": "String"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "35000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "newGroupMemberName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "PlayGesture",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "winkBangGesture"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_TimeoutGroupMembership",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "3",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "self",
                                        "wmeType": "SelfWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "groupMemberWME",
                                        "wmeType": "GroupMemberWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "lastContactMS",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "lastContact"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "groupMemberName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "nonRegularGroupMember",
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "isRegular",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "false"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "groupMemberName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": true,
                                                                "name": "AvatarWME.withinSocialDistance",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "AvatarWME.SocialDistance.PERSONAL"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "nonRegularGroupMember"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "self"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "System.currentTimeMillis",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "lastContact"
                                                        }
                                                    ],
                                                    "tailOperator": {
                                                        "type": "operator",
                                                        "opType": "greaterThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    },
                                                    "tailBinaryOp": {
                                                        "type": "binaryOp",
                                                        "expression": [
                                                            {
                                                                "type": "ablExpression",
                                                                "varType": "ablLiteral",
                                                                "value": {
                                                                    "type": "ablLiteral",
                                                                    "value": "60000",
                                                                    "varType": "int"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_TimeoutGroupMembership",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "3",
                                "varType": "int"
                            }
                        }
                    },
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "regular",
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "isRegular",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "true"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "regName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "wmeType": "GroupMemberWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "regName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "groupMemberWME",
                                        "wmeType": "GroupMemberWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "lastContactMS",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "lastContact"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "_bind",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "groupMemberName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "nonRegularGroupMember",
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "isRegular",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "false"
                                                }
                                            },
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "groupMemberName"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": true,
                                                                "name": "AvatarWME.withinSocialDistance",
                                                                "params": [
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "AvatarWME.SocialDistance.SOCIAL"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "nonRegularGroupMember"
                                                                    },
                                                                    {
                                                                        "type": "param",
                                                                        "varType": "regular"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "default"
                                            ]
                                        ]
                                    },
                                    {
                                        "type": "conditionalExpression",
                                        "clauses": [
                                            [
                                                {
                                                    "type": "binaryOp",
                                                    "expression": [
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "javaMethod",
                                                            "value": {
                                                                "type": "javaMethod",
                                                                "bang": false,
                                                                "name": "System.currentTimeMillis",
                                                                "params": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "lastContact"
                                                        }
                                                    ],
                                                    "tailOperator": {
                                                        "type": "operator",
                                                        "opType": "greaterThan",
                                                        "possibleOps": [
                                                            "_bind",
                                                            "greaterThan",
                                                            "greaterEqual",
                                                            "lessThan",
                                                            "lessEqual",
                                                            "equal",
                                                            "notEqual"
                                                        ]
                                                    },
                                                    "tailBinaryOp": {
                                                        "type": "binaryOp",
                                                        "expression": [
                                                            {
                                                                "type": "ablExpression",
                                                                "varType": "ablLiteral",
                                                                "value": {
                                                                    "type": "ablLiteral",
                                                                    "value": "60000",
                                                                    "varType": "int"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                "default"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_TimeoutGroupMembership",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "2",
                                "varType": "int"
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_TimeoutGroupMembership",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "specificity",
                            "value": {
                                "type": "ablLiteral",
                                "value": "1",
                                "varType": "int"
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "500",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_BeNearAGroupMember",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "ablVariableDeclaration",
                        "name": "xloc",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "yloc",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "zloc",
                        "varType": "double"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "followAvatarName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "groupMemberName",
                        "varType": "String"
                    },
                    {
                        "type": "ablVariableDeclaration",
                        "name": "startTime",
                        "varType": "long"
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "ShuffleWME",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\"GroupMemberWME\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "ShuffleWME",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "\"AvatarWME\"",
                                            "varType": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [
                            {
                                "type": "stepModifier",
                                "modType": "successTest",
                                "modValue": {
                                    "type": "successTest",
                                    "testExpression": {
                                        "type": "testExpression",
                                        "clauses": [
                                            {
                                                "type": "conditionalExpression",
                                                "clauses": [
                                                    [
                                                        {
                                                            "type": "binaryOp",
                                                            "expression": [
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "conditionalExpression",
                                                                    "value": {
                                                                        "type": "conditionalExpression",
                                                                        "clauses": [
                                                                            [
                                                                                {
                                                                                    "type": "binaryOp",
                                                                                    "expression": [
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "javaMethod",
                                                                                            "value": {
                                                                                                "type": "javaMethod",
                                                                                                "bang": false,
                                                                                                "name": "System.currentTimeMillis",
                                                                                                "params": []
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "type": "ablExpression",
                                                                                            "varType": "name",
                                                                                            "value": "startTime"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "default"
                                                                            ]
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ablExpression",
                                                                    "varType": "ablLiteral",
                                                                    "value": {
                                                                        "type": "ablLiteral",
                                                                        "value": "2500",
                                                                        "varType": "int"
                                                                    }
                                                                }
                                                            ],
                                                            "operator": {
                                                                "type": "operator",
                                                                "opType": "greaterThan",
                                                                "possibleOps": [
                                                                    "_bind",
                                                                    "greaterThan",
                                                                    "greaterEqual",
                                                                    "lessThan",
                                                                    "lessEqual",
                                                                    "equal",
                                                                    "notEqual"
                                                                ]
                                                            }
                                                        },
                                                        "default"
                                                    ]
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "SelfWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "sitting",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "false"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "z",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "myZ"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "y",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "myY"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "x",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "myX"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": true,
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "distanceFromSelf",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "lessThan",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "ablLiteral",
                                                            "value": {
                                                                "type": "ablLiteral",
                                                                "value": "2.7",
                                                                "varType": "float"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isGroupMember",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "AvatarWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "z",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "zloc"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "y",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "yloc"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "x",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "xloc"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "isRegular",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "true"
                                                        }
                                                    },
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "_bind",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "followAvatarName"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "wmeTest",
                                                "bang": false,
                                                "wmeType": "GroupMemberWME",
                                                "fieldTests": [
                                                    {
                                                        "type": "wmeFieldTest",
                                                        "name": "name",
                                                        "operator": {
                                                            "type": "operator",
                                                            "opType": "equal",
                                                            "possibleOps": [
                                                                "_bind",
                                                                "greaterThan",
                                                                "greaterEqual",
                                                                "lessThan",
                                                                "lessEqual",
                                                                "equal",
                                                                "notEqual"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "type": "ablExpression",
                                                            "varType": "name",
                                                            "value": "followAvatarName"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        ],
                        "step": {
                            "type": "basicStep",
                            "value": "wait"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "StandIfSitting",
                            "params": []
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "1200",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "followAvatarName"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "WalkAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "xloc"
                                },
                                {
                                    "type": "param",
                                    "varType": "yloc"
                                },
                                {
                                    "type": "param",
                                    "varType": "zloc"
                                },
                                {
                                    "type": "param",
                                    "varType": "PERSONAL_BUFFER"
                                }
                            ]
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "TurnAndWait",
                            "params": [
                                {
                                    "type": "param",
                                    "varType": "followAvatarName"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_SetupInitialGroupMembers",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [],
                "modifiers": [],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_PrintOutDistanceToSomebody",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "self",
                                        "wmeType": "SelfWME",
                                        "fieldTests": []
                                    },
                                    {
                                        "type": "wmeTest",
                                        "bang": false,
                                        "name": "avWME",
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "mentalAct"
                        }
                    },
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "750",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "type": "behaviourDefinition",
                "name": "Regular_PrintOutDistanceToSomebody",
                "behType": "sequential",
                "joint": false,
                "atomic": false,
                "adaptive": false,
                "params": [
                    {
                        "type": "param",
                        "varType": "String",
                        "value": {
                            "type": "ablExpression",
                            "varType": "name",
                            "value": "avatarName"
                        }
                    }
                ],
                "modifiers": [
                    {
                        "type": "behaviourModifier",
                        "value": {
                            "type": "precondition",
                            "testExpression": {
                                "type": "testExpression",
                                "clauses": [
                                    {
                                        "type": "wmeTest",
                                        "bang": true,
                                        "wmeType": "AvatarWME",
                                        "fieldTests": [
                                            {
                                                "type": "wmeFieldTest",
                                                "name": "name",
                                                "operator": {
                                                    "type": "operator",
                                                    "opType": "equal",
                                                    "possibleOps": [
                                                        "_bind",
                                                        "greaterThan",
                                                        "greaterEqual",
                                                        "lessThan",
                                                        "lessEqual",
                                                        "equal",
                                                        "notEqual"
                                                    ]
                                                },
                                                "expression": {
                                                    "type": "ablExpression",
                                                    "varType": "name",
                                                    "value": "avatarName"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "variables": [
                    {
                        "type": "behaviourStep",
                        "modifiers": [],
                        "step": {
                            "type": "goalStep",
                            "joint": false,
                            "goalType": "sub",
                            "goalName": "Wait",
                            "params": [
                                {
                                    "type": "param",
                                    "value": {
                                        "type": "ablExpression",
                                        "varType": "ablLiteral",
                                        "value": {
                                            "type": "ablLiteral",
                                            "value": "3000",
                                            "varType": "int"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        ],
        "imports": [
            {
                "type": "importDeclaration",
                "starred": false,
                "name": "java.util.ArrayList"
            },
            {
                "type": "importDeclaration",
                "starred": false,
                "name": "java.util.Random"
            },
            {
                "type": "importDeclaration",
                "starred": true,
                "name": "java.lang"
            },
            {
                "type": "importDeclaration",
                "starred": true,
                "name": "eis.ablsl.wmes"
            },
            {
                "type": "importDeclaration",
                "starred": true,
                "name": "eis.ablsl.sensors"
            },
            {
                "type": "importDeclaration",
                "starred": true,
                "name": "eis.ablsl.actions"
            },
            {
                "type": "importDeclaration",
                "starred": true,
                "name": "eis.ablsl.structs"
            },
            {
                "type": "importDeclaration",
                "starred": true,
                "name": "eis.ablsl"
            }
        ],
        "packageDec": {
            "type": "package",
            "name": "eis.ablsl.agents"
        },
        "registeredWMEs": [
            {
                "type": "WMERegistration",
                "wmeType": "ItemReceivedWME",
                "target": "ItemReceivedSensor"
            },
            {
                "type": "WMERegistration",
                "wmeType": "ObjectWME",
                "target": "ObjectSensor"
            },
            {
                "type": "WMERegistration",
                "wmeType": "SelfWME",
                "target": "SelfSensor"
            },
            {
                "type": "WMERegistration",
                "wmeType": "AvatarWME",
                "target": "AvatarSensor"
            },
            {
                "type": "WMERegistration",
                "wmeType": "AnimationWME",
                "target": "AnimationSensor"
            }
        ],
        "initialTree": {
            "type": "initialTree",
            "steps": [
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "AlwaysTakeDrink",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "TimeoutDrink",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "Regular_TimeinGroupMembership",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "Regular_TimeoutGroupMembership",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterStageDance",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterGetDrink",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterGetWaiterDrink",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterDetectGreetingByGroupMember",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterGreetingFromChatCircleWithParticipant",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterGreetingFromChatCircle",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterGreeting",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterSoloDanceAsAudienceMeAndOther",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterSoloDanceAsAudience",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterSoloDanceAsPerformer",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterSoloDance",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterDanceCircleFromOthersDancing",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterDanceCircle",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "10",
                                    "varType": "int"
                                }
                            }
                        },
                        {
                            "type": "stepModifier",
                            "modType": "persistence",
                            "modValue": {
                                "type": "persistence"
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "EnterChatCircle",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "1",
                                    "varType": "int"
                                }
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "TransitionToChatCircle",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "50",
                                    "varType": "int"
                                }
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "ClearDrinksInHand",
                        "params": []
                    }
                },
                {
                    "type": "behaviourStep",
                    "modifiers": [
                        {
                            "type": "stepModifier",
                            "modType": "priorityModifier",
                            "modValue": {
                                "type": "priorityModifier",
                                "value": {
                                    "type": "ablLiteral",
                                    "value": "50",
                                    "varType": "int"
                                }
                            }
                        }
                    ],
                    "step": {
                        "type": "goalStep",
                        "joint": false,
                        "goalType": "sub",
                        "goalName": "Regular_SetupInitialGroupMembers",
                        "params": []
                    }
                }
            ]
        }
    }
]