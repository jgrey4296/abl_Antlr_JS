// shared mood.abl

// when requesting resources, mood typically requests at 20, below beatgoals
// but if need be (eg, for bursts), request at 50, above beatgoals

// note that PerformMood() behaviors will subgoal staging with a priority of 0, 
// because PerformMood_getResources() should already own the resource, 
// so the priority of 0 doesn't matter!


// ############ 
// InitMoodManager
sequential behavior InitMoodManager() { 
	mental_act { 
		BehavingEntity.getBehavingEntity().addWME(new MoodWME(eMood_neutral, -1, eMoodStrength_low, 0, 
																0.0f, eMood_neutral, 0.0f, 
																eSpriteID_NOTASPRITE, eSpriteID_NOTASPRITE,
																cConverseDist_near, 0.0f)); 
		BehavingEntity.getBehavingEntity().addWME(new MoodTempWME(0, false)); 
	}
}



// ############ 
// SetMood

atomic sequential behavior SetMood(int type, int strength, int alt, int pri) { 
	subgoal SetMood(type, strength, alt, pri, 15.0f, type, 0.0f, eSpriteID_NOTASPRITE, eSpriteID_NOTASPRITE);
}

atomic sequential behavior SetMood(int type, int strength, int alt, int pri, float decaySecs) { 
	subgoal SetMood(type, strength, alt, pri, decaySecs, type, 0.0f, eSpriteID_NOTASPRITE, eSpriteID_NOTASPRITE);
}

atomic sequential behavior SetMood(int type, int strength, int alt, int pri, float decaySecs, int decayToType,
									float burstDecay, int charID1, int charID2) { 
	precondition { moodWME = (MoodWME) }

	int curType;
	int curAlt;
	int curStrength;
	int curPri;
	float curBurstDecay;
	boolean bSimilarToCurrentMood;

	mental_act { 

		//System.out.print(myName + " SetMood " + type + " " + strength + " " + pri + " ");
		//if (burstDecay > 0) StringUtil.println("BURST " + burstDecay);
		//else StringUtil.println(" ");

		curType = moodWME.getType();
		curAlt = moodWME.getAlt();
		curStrength = moodWME.getStrength();
		curPri = moodWME.getPriority();
		curBurstDecay = moodWME.getBurstDecay();
		bSimilarToCurrentMood = (curType == type && curAlt == alt && 
									curStrength == strength && curPri == pri);

		// new priority has to be >= current priority to take effect
		if (pri >= curPri) {

			// if we're not supposed to take time do decay, do the decay effect immediately
			// for example, this allows a high priority mood to override the current mood,
			//  immediately resetting the mood to neutral, priority 0
			if (decaySecs == 0.0f) {
				type = decayToType;
				pri = 0;
				burstDecay = 0.0f;
				bSimilarToCurrentMood = false;
			}

			// add a bit of noise to decaySecs
			if (decaySecs >= 2.0f) {
				decaySecs += (0.5f - (randGen.nextFloat() * 1.0f));
			}

			moodWME.setType(type);
			moodWME.setAlt(alt);
			moodWME.setStrength(strength);
			moodWME.setPriority(pri);
			moodWME.setDecay(decaySecs);				// automatically sets decayAtMillis
			moodWME.setDecayToType(decayToType);

			// don't alter the current burst decay if the current burst decay is non-zero and the new one is zero
			// this is because if the only difference between the new mood and current mood is that 
			// the new mood has no burst, then let the old burst finish
			if (!(curBurstDecay > 0.0f && bSimilarToCurrentMood && burstDecay == 0.0f)) {				
				moodWME.setBurstDecay(burstDecay);		// automatically sets burstDecayAtMillis
			}

			moodWME.setCharID1(charID1);
			moodWME.setCharID2(charID2);

			// if we're doing a burst decay, enforce restart of mood performance
			// this is needed in case we call SetMood() with same values as current mood, except with burst
			if (burstDecay > 0.0f) {
				moodWME.setBTerminate(true);
			}
		}
	}
}

sequential behavior SetMoodAtDialogCue(int dialogCue, int dialogSpriteID, int type, int strength, int alt, int pri) { 
	precondition { (dialogSpriteID == eSpriteID_trip || dialogSpriteID == eSpriteID_grace) }
	//mental_act { StringUtil.println("!!!!!! SetMoodAtDialogCue in " + BehavingEntity.getBehavingEntity() + 
	//		" waiting for cue " + dialogCue + " from dialogSpriteID " + dialogSpriteID); }
	subgoal WaitForAnimCueWithTimeout(eAnimLayer_dialog, dialogCue, 7);		// timeout in case the cue is dropped
	//mental_act { StringUtil.println("!!!!!! SetMoodAtDialogCue got cue " + dialogCue); }
	subgoal SetMood(type, strength, alt, pri);
}
sequential behavior SetMoodAtDialogCue(int dialogCue, int dialogSpriteID, int type, int strength, int alt, int pri) { 
	precondition { (dialogSpriteID != eSpriteID_trip && dialogSpriteID != eSpriteID_grace) }
	mental_act { StringUtil.println("### Error: Illegal dialogSpriteID " + dialogSpriteID + " in SetMoodAtDialogCue"); }
	mental_act { assert(false); }
}

sequential behavior SetMoodAfterDelay(int type, int strength, int alt, int pri, float delay) { 
	subgoal WaitFor(delay);
	subgoal SetMood(type, strength, alt, pri);
}

atomic sequential behavior SetMoodWMEStagingConverseInfo(float converseDist, float outwardAngleOffset) {
	precondition {	{ StoryMemory	(StoryStatusWME affinity :: affinity) 
									(TensionStoryValueWME value :: tension) } 
					moodWME = (MoodWME) }

	mental_act { 

		// at tension2, if we are to converse near the player, 
		// stand a bit closer if we have affinity, and a bit farther if we don't
		if (tension == 2 && converseDist == cConverseDist_near) {

			if ((me == grace && affinity >= eAffinity_trip) || 
					(me == trip && affinity <= eAffinity_grace)) {
				converseDist = cConverseDist_nearStepFarther;
			}

			if ((me == grace && affinity <= eAffinity_grace) || 
					(me == trip && affinity >= eAffinity_trip)) {
				converseDist = cConverseDist_nearStepCloser;
			}
	
			moodWME.setStagingConverseInfo(converseDist, outwardAngleOffset); 
		}
	} 
}


// ############ 
// MoodManager
sequential behavior MoodManager() { 
	precondition {	moodWME = (MoodWME) 
					moodTempWME = (MoodTempWME) }

	boolean bHoldingObject;

	// clear this flag
	mental_act { moodWME.setBTerminate(false); }

	// set a flag if we are holding an object -- value gets returned in MoodTempWME
	// it is convenient to sense this once here, because what are determining is whether or not a wme exists,
	// which can be a cumbersome thing to test for some kinds of precondition logic (e.g., or-logic)
	subgoal MoodManager_GetIfHoldingObject();
	mental_act { bHoldingObject = moodTempWME.getBVal(); }

	subgoal MoodManager_Body(bHoldingObject);
}

sequential behavior MoodManager_GetIfHoldingObject() { 
	precondition {	(HeldObjectWME characterID == me) 
					moodTempWME = (MoodTempWME) }
	specificity 2;
	mental_act { moodTempWME.setBVal(true); }				// workaround lack of return values in abl
} 

sequential behavior MoodManager_GetIfHoldingObject() { 
	precondition {	moodTempWME = (MoodTempWME) }
	specificity 1;
	mental_act { moodTempWME.setBVal(false); }				// workaround lack of return values in abl
}


parallel behavior MoodManager_Body(boolean bHoldingObject) { 

	// do the current mood
	// we do ignore_failure because the mood may fail if resources are not available
	with (ignore_failure) subgoal MoodManager_dispatcher(bHoldingObject);

	// don't dispatch the mood more than once per half-second, 
	// in case the dispatcher immediately ended,
	// e.g., because the mood does nothing, or due to resources not available
	//fixme: ideally we don't want this delay if the dispatcher failed because the mood just changed
	subgoal WaitFor(cMoodMangerRetryDelay);	
	
	// if the decays happen to finish, do them
	// otherwise a future run of MoodManager will decay them
	with (effect_only, ignore_failure) subgoal MoodDecay();
	with (effect_only, ignore_failure) subgoal MoodBurstDecay();
}

sequential behavior MoodManager_dispatcher(boolean bHoldingObject) { 
	precondition { (MoodWME type :: type  strength :: strength  burstDecay :: burstDecay) }

	// if mood changes, or we should terminate, then fail
	context_condition { (MoodWME type == type  strength == strength  bTerminate == false) }				

	BehaviorWME ownerBehaviorWME;

	//mental_act { StringUtil.println(myName + " dispatch mood " + type + " " + strength + " burstDecay " + burstDecay); }

	// ## 1. GET OUR BEHAVIORWME, as a resource owner token
	mental_act { ownerBehaviorWME = getReflectionWME().getParent(); }

	// ## 2. GRAB RESOURCES ATOMICALLY -- this will fail if we cannot get resources
	// and if the resource gets taken away from us later on, we will fail
	subgoal PerformMood_getResources(ownerBehaviorWME, bHoldingObject);		

	// ## 3. PERFORM MOOD
	subgoal PerformMood(bHoldingObject);
}


sequential behavior MoodDecay() {
	precondition { moodWME = (MoodWME decay > 0  decayAtMillis :: decayAtMillis) }
	//mental_act { StringUtil.println(myName + " MoodDecay start " + decayAtMillis + " > " + System.currentTimeMillis()); }
	// old with ( success_test { (System.currentTimeMillis() > decayAtMillis) } ) wait;
	// new -- decayAtMillis may get changed under our feet!
	with ( success_test { (System.currentTimeMillis() > moodWME.getDecayAtMillis()) } ) wait;
	mental_act { 
		moodWME.setType(moodWME.getDecayToType());		// set our type to decayToType
		moodWME.setDecay(0);							// reset decay and priority
		moodWME.setPriority(0);	
		StringUtil.println(myName + " MoodDecay finished");
	}
}

sequential behavior MoodBurstDecay() {
	precondition { moodWME = (MoodWME burstDecay > 0  burstDecayAtMillis :: burstDecayAtMillis) }
	//mental_act { StringUtil.println(myName + " MoodBurstDecay start " + burstDecayAtMillis + " > " + System.currentTimeMillis()); }
	// old with ( success_test { (System.currentTimeMillis() > burstDecayAtMillis) } ) wait;
	// new -- burstDecayAtMillis may get changed under our feet!
	with ( success_test { (System.currentTimeMillis() > moodWME.getBurstDecayAtMillis()) } ) wait;
	mental_act { 
		moodWME.setBurstDecay(0);					// reset this
		StringUtil.println(myName + " MoodBurstDecay finished");
	}
}


// ####
// TryToDoAct behaviors -- used when we don't own a resource, but hope it will become available
// we grab the resource locally, which allows the resource to safely be taken away again, without failing the mood

sequential behavior TryToDoGaze(int resourcePriority, int gazeType, int gazeParam) {
	specificity 2;
	BehaviorWME ownerBehaviorWME;
	mental_act { ownerBehaviorWME = getReflectionWME().getParent(); }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_gaze,	resourcePriority, eBodyResourceAction_fail, ownerBehaviorWME);
	subgoal DoGaze(-1, gazeType, gazeParam);
	wait;	// KEEP THE RESOURCE -- we are subgoaled with effect_only, so it's okay
}
sequential behavior TryToDoGaze(int resourcePriority, int gazeType, int gazeParam) {
	specificity 1;
	//mental_act { StringUtil.println("## TryToDoGaze fail"); }
	subgoal WaitFor(1);
	fail_step;
}

sequential behavior TryToDoArmLGesture(int resourcePriority, int armLGesture, boolean bHoldingObject) {
	precondition { (!bHoldingObject) }
	specificity 2;
	BehaviorWME ownerBehaviorWME;
	mental_act { ownerBehaviorWME = getReflectionWME().getParent(); }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_armL, resourcePriority, eBodyResourceAction_fail, ownerBehaviorWME);
	subgoal DoGesture(-1, eGestureBodyPartIndex_armL, armLGesture, true);
	wait;	// KEEP THE RESOURCE -- we are subgoaled with effect_only, so it's okay
}
sequential behavior TryToDoArmLGesture(int resourcePriority, int armLGesture, boolean bHoldingObject) {
	specificity 1;
	subgoal WaitFor(1);
	fail_step;
}

sequential behavior TryToDoArmRGesture(int resourcePriority, int armRGesture, boolean bHoldingObject) {
	precondition { (!bHoldingObject) }
	specificity 2;
	BehaviorWME ownerBehaviorWME;
	mental_act { ownerBehaviorWME = getReflectionWME().getParent(); }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_armR, resourcePriority, eBodyResourceAction_fail, ownerBehaviorWME);
	subgoal DoGesture(-1, eGestureBodyPartIndex_armR, armRGesture, true);
	wait;	// KEEP THE RESOURCE -- we are subgoaled with effect_only, so it's okay
}
sequential behavior TryToDoArmRGesture(int resourcePriority, int armRGesture, boolean bHoldingObject) {
	specificity 1;
	subgoal WaitFor(1);
	fail_step;
}

sequential behavior TryToDoArmsBothGesture(int resourcePriority, int armsBothGesture, boolean bHoldingObject) {
	precondition { (!bHoldingObject) }
	specificity 2;
	BehaviorWME ownerBehaviorWME;
	mental_act { ownerBehaviorWME = getReflectionWME().getParent(); }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_armL, resourcePriority, eBodyResourceAction_fail, ownerBehaviorWME);
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_armR, resourcePriority, eBodyResourceAction_fail, ownerBehaviorWME);
	subgoal DoGesture(-1, eGestureBodyPartIndex_armsBoth, armsBothGesture, true);
	wait;	// KEEP THE RESOURCE -- we are subgoaled with effect_only, so it's okay
}
sequential behavior TryToDoArmsBothGesture(int resourcePriority, int armsBothGesture, boolean bHoldingObject) {
	specificity 1;
	subgoal WaitFor(1);
	fail_step;
}


// ------------------------------
// ------------------------------
// ------------------------------
// mood performance


// ######################
// ## NEUTRAL -- all strengths are the same

atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_neutral) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_neutral) }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_neutral);
}


// ######################
// ## HAPPY

// ## happy barely
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_happy  strength == eMoodStrength_barely) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_happy  strength == eMoodStrength_barely) }
	//mental_act { StringUtil.println(myName + " PerformMood happy barely"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_happyLow);
}

// ## happy low
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_happy  strength == eMoodStrength_low) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_happy  strength == eMoodStrength_low) }
	//mental_act { StringUtil.println(myName + " PerformMood happy low"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_happyLow);
}

// ## happy medium
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_happy  strength == eMoodStrength_medium) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_happy  strength == eMoodStrength_medium) }
	//mental_act { StringUtil.println(myName + " PerformMood happy medium"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_happyMedium);
}

// ## happy high -- same as medium
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_happy  strength == eMoodStrength_high) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_happy  strength == eMoodStrength_high) }
	//mental_act { StringUtil.println(myName + " PerformMood happy high"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_happyMedium);			// same as medium
}



// ######################
// ## ANGRY


// ## angry barely
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_angry  strength == eMoodStrength_barely) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_angry  strength == eMoodStrength_barely) }
	//mental_act { StringUtil.println(myName + " PerformMood angry barely"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_angryBarely);
}

// ## angry low
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_angry  strength == eMoodStrength_low) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_angry  strength == eMoodStrength_low) }
	//mental_act { StringUtil.println(myName + " PerformMood angry low"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_angryLow);
}

// ## angry medium
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_angry  strength == eMoodStrength_medium) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_angry  strength == eMoodStrength_medium) }
	//mental_act { StringUtil.println(myName + " PerformMood angry medium"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_angryMedium);
}

// ## angry high
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_angry  strength == eMoodStrength_high) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_angry  strength == eMoodStrength_high) }
	//mental_act { StringUtil.println(myName + " PerformMood angry high"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_angryHigh);
}


// ######################
// ## ANXIOUS


// ## anxious barely
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_anxious  strength == eMoodStrength_barely) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_anxious  strength == eMoodStrength_barely) }
	//mental_act { StringUtil.println(myName + " PerformMood anxious barely"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_anxiousBarely);
}

// ## anxious low ALT 0
// always do this if bHoldingObject

atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_anxious  strength == eMoodStrength_low  alt :: alt) 
					((alt == 0 || alt == -1) || bHoldingObject) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME); 
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_gaze, 20, eBodyResourceAction_fail, ownerBehaviorWME);
}

sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition {	moodWME = (MoodWME type == eMood_anxious  strength == eMoodStrength_low  alt :: alt)
					((alt == 0 || alt == -1) || bHoldingObject)
					(MoodWME charID1 :: charID1  charID2 :: charID2) 
					tempWME = (MoodTempWME) }

	//mental_act { StringUtil.println(myName + " PerformMood_anxiousLow"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	mental_act {
		// if we're not given a character to look anxiously at, then look away
		if (charID1 == eSpriteID_NOTASPRITE) {	
			charID1 = eSpriteID_workTable;		//fixme
		}

		// set number of loops
		tempWME.setVal(1 + randGen.nextInt(3));
		StringUtil.println(myName + " PerformMood_anxiousLow loop " + tempWME.getVal());
	}

	subgoal DoFullExpressionMood(-1, eFEMood_anxiousLow);

	with (ignore_failure) subgoal PerformMood_anxiousLow_Loop(charID1, charID2);
}

// loop the anxious gazes
sequential behavior PerformMood_anxiousLow_Loop(int charID1, int charID2) { 
	with (persistent when_succeeds) subgoal PerformMood_anxiousLow_LoopBody(charID1, charID2);
}
sequential behavior PerformMood_anxiousLow_LoopBody(int charID1, int charID2) { 
	precondition {	tempWME = (MoodTempWME val > 0) 
					(GazeWME	objectID :: origGazeObjectID
								speed :: origGazeSpeed 
								type :: origGazeType) }

	float delay;

	subgoal WaitFor(1, 2);

	// first look anxiously away from object
	subgoal DoGaze(-1, eGazeType_avert, charID1);
	mental_act { delay = 0.75f + randGen.nextFloat()*0.5f; }
	subgoal WaitFor(delay);

	// do original gaze for longer
	subgoal DoGaze(-1, origGazeType, origGazeObjectID);
	mental_act { delay = 1.0f + randGen.nextFloat()*1.0f; }
	subgoal WaitFor(delay);

	// decrement the loop counter
	mental_act { tempWME.setVal(tempWME.getVal() - 1); }
}


// ## anxious low ALT 1
// never do this if bHoldingObject, because this crosses arms

// getResources
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) {	
	precondition {	(MoodWME type == eMood_anxious  strength == eMoodStrength_low  alt :: alt) 
					((alt == 1 || alt == -1) && !bHoldingObject) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}

sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition {	moodWME = (MoodWME type == eMood_anxious  strength == eMoodStrength_low  alt :: alt) 
					((alt == 1 || alt == -1) && !bHoldingObject) }
	//mental_act { StringUtil.println(myName + " PerformMood_anxiousLow"); }
	subgoal PerformMood_anxiousLow_stuff(bHoldingObject);
}

parallel behavior PerformMood_anxiousLow_stuff(boolean bHoldingObject) {
	subgoal DoFullExpressionMood(-1, eFEMood_anxiousLow);	
	with (persistent when_fails, effect_only) subgoal TryToDoArmsBothGesture(20, g_armsBothGesture_crossed, bHoldingObject);
	subgoal WaitFor(20);
}


// ## anxious low ALT 2 -- do neither armsCrossed or glances

// getResources
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) {	
	precondition {	(MoodWME type == eMood_anxious  strength == eMoodStrength_low  alt == 2) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}

sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition {	(MoodWME type == eMood_anxious  strength == eMoodStrength_low  alt :: alt) 
					(alt == 2) }
	subgoal DoFullExpressionMood(-1, eFEMood_anxiousLow);	
}


// ## anxious medium
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_anxious  strength == eMoodStrength_medium) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_anxious  strength == eMoodStrength_medium) }
	//mental_act { StringUtil.println(myName + " PerformMood anxious medium"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_anxiousMedium);
}

// ## anxious high -- same as medium
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_anxious  strength == eMoodStrength_high) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_anxious  strength == eMoodStrength_high) }
	//mental_act { StringUtil.println(myName + " PerformMood anxious high"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_anxiousMedium);			// same as medium
}


// ######################
// ## REJECTED

// ## rejected barely
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_rejected  strength == eMoodStrength_barely) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_rejected  strength == eMoodStrength_barely) }
	//mental_act { StringUtil.println(myName + " PerformMood rejected barely"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_rejectedLow);
}

// ## rejected low

// burst getResources
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition {	(MoodWME type == eMood_rejected  strength == eMoodStrength_low)
					(MoodWME burstDecay > 0.0f) }				
	specificity 3;
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_legsBody, 50, eBodyResourceAction_fail, ownerBehaviorWME);
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	50, eBodyResourceAction_fail, ownerBehaviorWME);
}
// if we couldn't get resources, then skip (immediately end) the burst, to allow the normal mood to happen
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition {	(MoodWME type == eMood_rejected  strength == eMoodStrength_low)
					moodWME = (MoodWME burstDecay > 0.0f) }		
	specificity 2;
	mental_act { 
		moodWME.setBurstDecay(0);
		StringUtil.println(myName + " PerformMood_rejectedLowBurst_getResources failed, skipping burst");
	}
	fail_step;
}

// burst performance
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition {	moodWME = (MoodWME type == eMood_rejected  strength == eMoodStrength_low)
					(MoodWME burstDecay > 0.0f) }	// BURST
	specificity 2;
	float temp;
	//mental_act { StringUtil.println(myName + " PerformMood_rejectedLow burst"); }
	mental_act { temp = 30.0f + (randGen.nextFloat() * 10.0f); } // face away 
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_notTooNear, temp); 
	subgoal PerformMood_rejectedLow_burstStuff(bHoldingObject);
	//mental_act { StringUtil.println("#### " + myName + " PerformMood_rejectedLow burst is done"); }
}
parallel behavior PerformMood_rejectedLow_burstStuff(boolean bHoldingObject) {
	precondition { (MoodWME stagingConverseDist :: stagingConverseDist) }
	subgoal DoFullExpressionMood(-1, eFEMood_rejectedLow);	
	with (persistent when_fails, effect_only) subgoal TryToDoGaze(50, eGazeType_normal, noOne);
	with (persistent when_fails, effect_only) subgoal TryToDoArmsBothGesture(50, g_armsBothGesture_crossed, bHoldingObject);
	with (ignore_failure, property isStagingGoal true)				// subgoal staging to wait until walk is done	
		subgoal StagingConverse(50, player, eConverseType_offCenterShared, stagingConverseDist, eWalkType_normal);

	// wait until the burst decays, so we hold onto our resources!
	with (success_test { (MoodWME burstDecay == 0.0f) } ) wait;
}


// normal getResources
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) {	
	precondition {	(MoodWME type == eMood_rejected  strength == eMoodStrength_low) }
	specificity 1;
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}

// normal performance
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition {	moodWME = (MoodWME type == eMood_rejected  strength == eMoodStrength_low) }
	specificity 1;
	//mental_act { StringUtil.println(myName + " PerformMood_rejectedLow"); }
	subgoal PerformMood_rejectedLow_stuff(bHoldingObject);
}

parallel behavior PerformMood_rejectedLow_stuff(boolean bHoldingObject) {
	precondition {	(MoodWME type == eMood_rejected  strength == eMoodStrength_low  alt :: alt) 
					(alt == -1 || alt == 0) }
	subgoal DoFullExpressionMood(-1, eFEMood_rejectedLow);	
	with (persistent when_fails, effect_only) subgoal TryToDoArmsBothGesture(20, g_armsBothGesture_crossed, bHoldingObject);
	subgoal WaitFor(20);
}

parallel behavior PerformMood_rejectedLow_stuff(boolean bHoldingObject) {
	precondition {	(MoodWME type == eMood_rejected  strength == eMoodStrength_low  alt == 1) }
	subgoal DoFullExpressionMood(-1, eFEMood_rejectedLow);	
	subgoal WaitFor(20);
}


// ## rejected medium
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_rejected  strength == eMoodStrength_medium) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_rejected  strength == eMoodStrength_medium) }
	//mental_act { StringUtil.println(myName + " PerformMood rejected medium"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_rejectedMedium);
}


// ## rejected high
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_rejected  strength == eMoodStrength_high) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_rejected  strength == eMoodStrength_high) }
	//mental_act { StringUtil.println(myName + " PerformMood rejected high (crying)"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_crying);
}


// ######################
// ## IMPATIENT


// ## impatient barely
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_impatient  strength == eMoodStrength_barely) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_impatient  strength == eMoodStrength_barely) }
	//mental_act { StringUtil.println(myName + " PerformMood impatient barely"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_angryBarely);
}

// ## impatient low
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_impatient  strength == eMoodStrength_low) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_impatient  strength == eMoodStrength_low) }
	//mental_act { StringUtil.println(myName + " PerformMood impatient low"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal PerformMood_impatientLow_stuff(bHoldingObject);
}
// left arm akimbo
parallel behavior PerformMood_impatientLow_stuff(boolean bHoldingObject) {
	subgoal DoFullExpressionMood(-1, eFEMood_angryBarely);	
	with (persistent when_fails, effect_only) subgoal TryToDoArmLGesture(20, g_armLGesture_akimbo, bHoldingObject);
	subgoal WaitFor(20);
}
// or right arm akimbo
parallel behavior PerformMood_impatientLow_stuff(boolean bHoldingObject) {
	subgoal DoFullExpressionMood(-1, eFEMood_angryBarely);	
	with (persistent when_fails, effect_only) subgoal TryToDoArmRGesture(20, g_armRGesture_akimbo, bHoldingObject);
	subgoal WaitFor(20);
}


// ## impatient medium
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_impatient  strength == eMoodStrength_medium) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_impatient  strength == eMoodStrength_medium) }
	//mental_act { StringUtil.println(myName + " PerformMood impatient medium"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_angryLow);
}

// ## impatient high
atomic sequential behavior PerformMood_getResources(BehaviorWME ownerBehaviorWME, boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_impatient  strength == eMoodStrength_high) }
	subgoal RequestOrConfirmBodyResource(eBodyResourceID_faceExpressionMood,	20, eBodyResourceAction_fail, ownerBehaviorWME);
}
sequential behavior PerformMood(boolean bHoldingObject) { 
	precondition { (MoodWME type == eMood_impatient  strength == eMoodStrength_high) }
	//mental_act { StringUtil.println(myName + " PerformMood impatient high"); }
	subgoal SetMoodWMEStagingConverseInfo(cConverseDist_near, 0.0f); 
	subgoal DoFullExpressionMood(-1, eFEMood_angryMedium);
}


